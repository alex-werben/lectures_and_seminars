import json
import os
import re
import logging
from abc import ABC, abstractmethod
from typing import Dict, Any, Optional, List, Type
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Pydantic –¥–ª—è —Å—Ç—Ä–æ–≥–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
try:
    from pydantic import BaseModel, Field, ValidationError
    from pydantic_settings import BaseSettings
except ImportError as e:
    raise ImportError(f"Pydantic –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pydantic pydantic-settings. –û—à–∏–±–∫–∞: {e}")

# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç autogen –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–º–∏ API
try:
    import autogen
    from autogen import ConversableAgent, UserProxyAgent
except ImportError as e:
    raise ImportError(f"AutoGen –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pyautogen. –û—à–∏–±–∫–∞: {e}")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# ==============================================================================
# –°–∏—Å—Ç–µ–º–∞ Raw –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è AutoGen
# ==============================================================================

class AutoGenRawLogger:
    def __init__(self, workspace_dir: str):
        self.workspace_dir = workspace_dir
        self.raw_log_file = os.path.join(workspace_dir, "autogen_raw_output.log")
        self.session_start_time = datetime.now()
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è raw AutoGen output
        self.raw_logger = logging.getLogger("autogen_raw")
        self.raw_logger.setLevel(logging.DEBUG)
        
        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ handlers –¥–ª—è —á–∏—Å—Ç–æ–≥–æ –≤—ã–≤–æ–¥–∞
        self.raw_logger.handlers.clear()
        self.raw_logger.propagate = False
        
        # –°–æ–∑–¥–∞–µ–º file handler –¥–ª—è raw –ª–æ–≥–æ–≤
        self.file_handler = logging.FileHandler(self.raw_log_file, mode='w', encoding='utf-8')
        self.file_handler.setLevel(logging.DEBUG)
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è raw –ª–æ–≥–æ–≤ - –≤—Ä–µ–º—è + —Å–æ–æ–±—â–µ–Ω–∏–µ
        formatter = logging.Formatter('%(asctime)s | %(message)s')
        self.file_handler.setFormatter(formatter)
        
        self.raw_logger.addHandler(self.file_handler)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è raw –ª–æ–≥-—Ñ–∞–π–ª–∞
        self._initialize_raw_log()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç AutoGen –ª–æ–≥–æ–≤
        self._setup_autogen_logging()
    
    def _initialize_raw_log(self):
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ raw –ª–æ–≥-—Ñ–∞–π–ª–∞."""
        header = f"""
================================================================================
                    AUTOGEN MULTI-AGENT SYSTEM - RAW OUTPUT LOG                    
================================================================================
Session started: {self.session_start_time.strftime('%Y-%m-%d %H:%M:%S')}
Workspace: {self.workspace_dir}
================================================================================

"""
        self.raw_logger.info(header.strip())
    
    def _setup_autogen_logging(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–µ—Ä–µ—Ö–≤–∞—Ç –ª–æ–≥–æ–≤ –æ—Ç AutoGen."""
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä AutoGen
        autogen_logger = logging.getLogger("autogen")
        
        # –°–æ–∑–¥–∞–µ–º custom handler –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ AutoGen –ª–æ–≥–æ–≤
        class AutoGenRawHandler(logging.Handler):
            def __init__(self, raw_logger):
                super().__init__()
                self.raw_logger = raw_logger
            
            def emit(self, record):
                try:
                    msg = self.format(record)
                    self.raw_logger.info(f"[AUTOGEN-{record.levelname}] {msg}")
                except Exception:
                    pass
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—à handler –∫ AutoGen –ª–æ–≥–≥–µ—Ä—É
        raw_handler = AutoGenRawHandler(self.raw_logger)
        raw_handler.setFormatter(logging.Formatter('%(message)s'))
        autogen_logger.addHandler(raw_handler)
        autogen_logger.setLevel(logging.DEBUG)
        
        logger.info("‚úÖ AutoGen raw logging –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    def log_chat_initiation(self, initiator: str, recipient: str, message: str):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –Ω–∞—á–∞–ª–æ —á–∞—Ç–∞ –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏."""
        log_entry = f"""
{'='*80}
CHAT INITIATION: {initiator} ‚Üí {recipient}
{'='*80}
Initial Message:
{message}
{'='*80}
"""
        self.raw_logger.info(log_entry.strip())
    
    def log_agent_response(self, agent_name: str, response: str):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞."""
        log_entry = f"""
{'‚îÄ'*80}
AGENT RESPONSE: {agent_name}
{'‚îÄ'*80}
{response}
{'‚îÄ'*80}
"""
        self.raw_logger.info(log_entry.strip())
    
    def log_tool_call(self, agent_name: str, tool_name: str, tool_input: str, tool_output: str):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –≤—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞."""
        log_entry = f"""
{'+'*80}
TOOL CALL: {agent_name} ‚Üí {tool_name}
{'+'*80}
INPUT:
{tool_input}
{'‚îÄ'*40}
OUTPUT:
{tool_output}
{'+'*80}
"""
        self.raw_logger.info(log_entry.strip())
    
    def log_chat_history(self, chat_history: list, context: str = ""):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞."""
        log_entry = f"""
{'*'*80}
CHAT HISTORY {f'({context})' if context else ''}
{'*'*80}
"""
        self.raw_logger.info(log_entry.strip())
        
        for i, msg in enumerate(chat_history):
            role = msg.get('role', msg.get('name', 'unknown'))
            content = msg.get('content', '')
            
            entry = f"""
[{i+1}] {role.upper()}:
{'-' * (len(role) + 10)}
{content}
"""
            self.raw_logger.info(entry.strip())
        
        self.raw_logger.info('*' * 80)
    
    def log_session_end(self):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏."""
        end_time = datetime.now()
        duration = end_time - self.session_start_time
        
        footer = f"""

================================================================================
                              SESSION COMPLETED                              
================================================================================
End time: {end_time.strftime('%Y-%m-%d %H:%M:%S')}
Duration: {str(duration).split('.')[0]}
================================================================================
"""
        self.raw_logger.info(footer.strip())
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º file handler
        if self.file_handler:
            self.file_handler.close()
            self.raw_logger.removeHandler(self.file_handler)

# ==============================================================================
# –°–∏—Å—Ç–µ–º–∞ Fancy –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# ==============================================================================

class FancyLogger:
    def __init__(self, workspace_dir: str):
        self.workspace_dir = workspace_dir
        self.log_file = os.path.join(workspace_dir, "agents_workflow.log")
        self.session_start_time = datetime.now()
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
        self.agent_emojis = {
            "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä": "üèóÔ∏è",
            "DataExtractor": "üîç", 
            "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç": "üíª",
            "–†–µ–≤—å—é–µ—Ä": "üß™",
            "–¢–µ—Ö–ü–∏—Å–∞—Ç–µ–ª—å": "üìù",
            "TeamLead": "üë®‚Äçüíº",
            "–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä": "üé≠"
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥-—Ñ–∞–π–ª–∞
        self._initialize_log()
    
    def _initialize_log(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ª–æ–≥-—Ñ–∞–π–ª–∞."""
        header = f"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                          ü§ñ AUTOGEN AGENTS WORKFLOW LOG                      ‚ïë
‚ïë                                                                              ‚ïë
‚ïë  –°–µ—Å—Å–∏—è –Ω–∞—á–∞—Ç–∞: {self.session_start_time.strftime('%Y-%m-%d %H:%M:%S')}                                           ‚ïë
‚ïë  –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.workspace_dir:<48} ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

"""
        
        with open(self.log_file, "w", encoding="utf-8") as f:
            f.write(header)
    
    def log_agent_action(self, agent_name: str, action: str, details: str = ""):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –∞–≥–µ–Ω—Ç–∞ —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
        timestamp = datetime.now().strftime('%H:%M:%S')
        emoji = self.agent_emojis.get(agent_name, "ü§ñ")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—É—é –∑–∞–ø–∏—Å—å
        log_entry = f"""
‚îå‚îÄ {timestamp} ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ {emoji} –ê–ì–ï–ù–¢: {agent_name:<20} ‚îÇ –î–ï–ô–°–¢–í–ò–ï: {action:<30} ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
"""
        
        if details:
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
            lines = details.split('\n')
            for line in lines:
                # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                if len(line) > 75:
                    line = line[:72] + "..."
                log_entry += f"‚îÇ {line:<75} ‚îÇ\n"
        
        log_entry += "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n"
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
        with open(self.log_file, "a", encoding="utf-8") as f:
            f.write(log_entry)
        
        # –¢–∞–∫–∂–µ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ)
        console_msg = f"{emoji} {agent_name}: {action}"
        if details and len(details) < 100:
            console_msg += f" | {details}"
        logger.info(console_msg)
    
    def log_phase_start(self, phase_name: str, phase_number: int):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–π —Ñ–∞–∑—ã."""
        timestamp = datetime.now().strftime('%H:%M:%S')
        
        phase_header = f"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë {timestamp} ‚îÇ üöÄ –§–ê–ó–ê {phase_number}: {phase_name:<50} ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
"""
        
        with open(self.log_file, "a", encoding="utf-8") as f:
            f.write(phase_header)
        
        logger.info(f"üöÄ –§–ê–ó–ê {phase_number}: {phase_name}")
    
    def log_error(self, agent_name: str, error_msg: str):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º."""
        timestamp = datetime.now().strftime('%H:%M:%S')
        emoji = self.agent_emojis.get(agent_name, "ü§ñ")
        
        error_entry = f"""
‚îå‚îÄ {timestamp} ‚îÄ ‚ùå –û–®–ò–ë–ö–ê ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ {emoji} –ê–ì–ï–ù–¢: {agent_name:<67} ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
"""
        
        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        lines = error_msg.split('\n')
        for line in lines[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
            if len(line) > 75:
                line = line[:72] + "..."
            error_entry += f"‚îÇ ‚ùå {line:<72} ‚îÇ\n"
        
        error_entry += "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n"
        
        with open(self.log_file, "a", encoding="utf-8") as f:
            f.write(error_entry)
        
        logger.error(f"‚ùå {agent_name}: {error_msg[:100]}...")
    
    def log_success(self, message: str):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ."""
        timestamp = datetime.now().strftime('%H:%M:%S')
        
        success_entry = f"""
‚îå‚îÄ {timestamp} ‚îÄ ‚úÖ –£–°–ü–ï–• ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ {message:<75} ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
"""
        
        with open(self.log_file, "a", encoding="utf-8") as f:
            f.write(success_entry)
        
        logger.info(f"‚úÖ {message}")
    
    def log_session_end(self):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏."""
        end_time = datetime.now()
        duration = end_time - self.session_start_time
        
        footer = f"""

‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                             üèÅ –°–ï–°–°–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê                              ‚ïë
‚ïë                                                                              ‚ïë
‚ïë  –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {end_time.strftime('%Y-%m-%d %H:%M:%S')}                                        ‚ïë
‚ïë  –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {str(duration).split('.')[0]:<52} ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
"""
        
        with open(self.log_file, "a", encoding="utf-8") as f:
            f.write(footer)
    
    def log_test_results(self, iteration: int, exit_code: int, test_logs: str, dependencies: list = None):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤."""
        timestamp = datetime.now().strftime('%H:%M:%S')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        status = "‚úÖ –ü–†–û–®–õ–ò" if exit_code == 0 else "‚ùå –ü–†–û–í–ê–õ–ò–õ–ò–°–¨"
        status_emoji = "‚úÖ" if exit_code == 0 else "‚ùå"
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏ —Ç–µ—Å—Ç–æ–≤
        test_stats = self._analyze_test_logs(test_logs)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        deps_str = ", ".join(dependencies) if dependencies else "–Ω–µ—Ç"
        if len(deps_str) > 60:
            deps_str = deps_str[:57] + "..."
        
        test_entry = f"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë {timestamp} ‚îÇ üß™ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í ‚îÇ –ò—Ç–µ—Ä–∞—Ü–∏—è {iteration:<3} ‚îÇ {status:<12} ‚ïë
‚ï†‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚ïë {status_emoji} –ö–æ–¥ –≤—ã—Ö–æ–¥–∞: {exit_code:<3} ‚îÇ üì¶ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {deps_str:<35} ‚ïë
‚ïë üéØ –ü—Ä–æ—à–ª–æ —Ç–µ—Å—Ç–æ–≤: {test_stats['passed']:<3} ‚îÇ ‚ùå –ü—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å: {test_stats['failed']:<3} ‚îÇ ‚ö†Ô∏è  –û—à–∏–±–æ–∫: {test_stats['errors']:<3} ‚ïë
"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –æ—à–∏–±–∫–∏ (–ø–µ—Ä–≤—ã–µ 3)
        if test_stats['error_details']:
            test_entry += "‚ï†‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n"
            test_entry += "‚ïë üîç –û–°–ù–û–í–ù–´–ï –û–®–ò–ë–ö–ò:                                                          ‚ïë\n"
            
            for i, error in enumerate(test_stats['error_details'][:3]):
                error_line = error[:69]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                if len(error) > 69:
                    error_line += "..."
                test_entry += f"‚ïë {i+1}. {error_line:<72} ‚ïë\n"
        
        test_entry += "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n"
        
        with open(self.log_file, "a", encoding="utf-8") as f:
            f.write(test_entry)
        
        # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
        console_msg = f"üß™ –¢–µ—Å—Ç—ã –∏—Ç–µ—Ä–∞—Ü–∏—è {iteration}: {status} (–∫–æ–¥ {exit_code})"
        if test_stats['passed'] > 0 or test_stats['failed'] > 0:
            console_msg += f" | ‚úÖ{test_stats['passed']} ‚ùå{test_stats['failed']}"
        logger.info(console_msg)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
        if exit_code != 0 and test_stats['critical_errors']:
            for error in test_stats['critical_errors'][:2]:  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2
                logger.error(f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {error}")
    
    def _analyze_test_logs(self, test_logs: str) -> dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª–æ–≥–∏ —Ç–µ—Å—Ç–æ–≤ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
        stats = {
            'passed': 0,
            'failed': 0,
            'errors': 0,
            'error_details': [],
            'critical_errors': []
        }
        
        if not test_logs:
            return stats
        
        lines = test_logs.split('\n')
        
        # –ò—â–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É pytest
        for line in lines:
            # –§–æ—Ä–º–∞—Ç: "= 2 failed, 3 passed in 1.23s ="
            if 'failed' in line and 'passed' in line:
                failed_match = re.search(r'(\d+)\s+failed', line)
                passed_match = re.search(r'(\d+)\s+passed', line)
                if failed_match:
                    stats['failed'] = int(failed_match.group(1))
                if passed_match:
                    stats['passed'] = int(passed_match.group(1))
            
            # –ò—â–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—à–µ–¥—à–∏—Ö —Ç–µ—Å—Ç–æ–≤
            elif 'passed' in line and 'failed' not in line:
                passed_match = re.search(r'(\d+)\s+passed', line)
                if passed_match:
                    stats['passed'] = int(passed_match.group(1))
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—à–∏–±–∫–∏
        current_error = ""
        collecting_error = False
        
        for line in lines:
            # –ù–∞—á–∞–ª–æ –æ—à–∏–±–∫–∏
            if line.startswith('FAILED') or 'AssertionError' in line or 'Error:' in line:
                if current_error:
                    stats['error_details'].append(current_error.strip())
                current_error = line
                collecting_error = True
                
                # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
                if any(keyword in line for keyword in ['ImportError', 'ModuleNotFoundError', 'SyntaxError']):
                    stats['critical_errors'].append(line.strip())
                    stats['errors'] += 1
            
            elif collecting_error and line.strip():
                if line.startswith(' ') or line.startswith('\t'):  # –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏
                    current_error += " " + line.strip()
                else:
                    # –ù–æ–≤–∞—è —Å–µ–∫—Ü–∏—è - –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â—É—é –æ—à–∏–±–∫—É
                    if current_error:
                        stats['error_details'].append(current_error.strip())
                        current_error = ""
                    collecting_error = False
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—à–∏–±–∫—É
        if current_error:
            stats['error_details'].append(current_error.strip())
        
        return stats
    
    def log_improvement_cycle(self, iteration: int, max_iterations: int, action: str, details: str = ""):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –≤ —Ü–∏–∫–ª–µ —É–ª—É—á—à–µ–Ω–∏–π."""
        timestamp = datetime.now().strftime('%H:%M:%S')
        
        cycle_entry = f"""
‚îå‚îÄ {timestamp} ‚îÄ üîÑ –¶–ò–ö–õ –£–õ–£–ß–®–ï–ù–ò–ô ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ üéØ –ò—Ç–µ—Ä–∞—Ü–∏—è: {iteration}/{max_iterations:<3} ‚îÇ üîß –î–µ–π—Å—Ç–≤–∏–µ: {action:<45} ‚îÇ
"""
        
        if details:
            lines = details.split('\n')
            for line in lines[:2]:  # –ú–∞–∫—Å–∏–º—É–º 2 —Å—Ç—Ä–æ–∫–∏ –¥–µ—Ç–∞–ª–µ–π
                if len(line) > 75:
                    line = line[:72] + "..."
                cycle_entry += f"‚îÇ üìã {line:<74} ‚îÇ\n"
        
        cycle_entry += "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n"
        
        with open(self.log_file, "a", encoding="utf-8") as f:
            f.write(cycle_entry)
        
        logger.info(f"üîÑ –ò—Ç–µ—Ä–∞—Ü–∏—è {iteration}/{max_iterations}: {action}")
    
    def log_docker_setup(self, dependencies: list, docker_enabled: bool):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É Docker —Å—Ä–µ–¥—ã."""
        timestamp = datetime.now().strftime('%H:%M:%S')
        
        docker_status = "üê≥ –í–ö–õ–Æ–ß–ï–ù" if docker_enabled else "üìÅ –õ–û–ö–ê–õ–¨–ù–û"
        deps_count = len(dependencies)
        deps_preview = ", ".join(dependencies[:3])
        if len(dependencies) > 3:
            deps_preview += f" –∏ –µ—â–µ {len(dependencies) - 3}"
        
        docker_entry = f"""
‚îå‚îÄ {timestamp} ‚îÄ üê≥ –ù–ê–°–¢–†–û–ô–ö–ê –°–†–ï–î–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ üéØ –†–µ–∂–∏–º: {docker_status:<12} ‚îÇ üì¶ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {deps_count:<3} ‚îÇ üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞...    ‚îÇ
‚îÇ üìã –ü–∞–∫–µ—Ç—ã: {deps_preview:<63} ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
"""
        
        with open(self.log_file, "a", encoding="utf-8") as f:
            f.write(docker_entry)
        
        logger.info(f"üê≥ Docker —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {docker_status} | –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {deps_count}")

# ==============================================================================
# –°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
# ==============================================================================

class TokenTracker:
    def __init__(self, workspace_dir: str, input_cost: float, output_cost: float):
        self.workspace_dir = workspace_dir
        self.input_cost = input_cost  # –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –≤—Ö–æ–¥—è—â–∏–π —Ç–æ–∫–µ–Ω –≤ —Ä—É–±–ª—è—Ö
        self.output_cost = output_cost  # –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –∏—Å—Ö–æ–¥—è—â–∏–π —Ç–æ–∫–µ–Ω –≤ —Ä—É–±–ª—è—Ö
        self.session_start_time = datetime.now()
        
        # –¢—Ä–µ–∫–∏–Ω–≥ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ –∞–≥–µ–Ω—Ç–∞–º
        self.agent_tokens = {
            "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä": {"input": 0, "output": 0, "calls": 0},
            "DataExtractor": {"input": 0, "output": 0, "calls": 0},
            "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç": {"input": 0, "output": 0, "calls": 0},
            "–†–µ–≤—å—é–µ—Ä": {"input": 0, "output": 0, "calls": 0},
            "–¢–µ—Ö–ü–∏—Å–∞—Ç–µ–ª—å": {"input": 0, "output": 0, "calls": 0},
            "TeamLead": {"input": 0, "output": 0, "calls": 0},
            "–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä": {"input": 0, "output": 0, "calls": 0}
        }
        
        # –§–∞–π–ª –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
        self.token_log_file = os.path.join(workspace_dir, "tokens_usage.log")
        self._initialize_token_log()
    
    def _initialize_token_log(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–∞–π–ª–∞ —Å —Ç–æ–∫–µ–Ω–∞–º–∏."""
        header = f"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                        üí∞ –û–¢–ß–ï–¢ –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ –¢–û–ö–ï–ù–û–í                     ‚ïë
‚ïë                                                                              ‚ïë
‚ïë  –°–µ—Å—Å–∏—è –Ω–∞—á–∞—Ç–∞: {self.session_start_time.strftime('%Y-%m-%d %H:%M:%S')}                                           ‚ïë
‚ïë  –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.workspace_dir:<48} ‚ïë
‚ïë  –°—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ö–æ–¥—è—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞: {self.input_cost:.6f} —Ä—É–±.                                ‚ïë
‚ïë  –°—Ç–æ–∏–º–æ—Å—Ç—å –∏—Å—Ö–æ–¥—è—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞: {self.output_cost:.6f} —Ä—É–±.                               ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

"""
        
        with open(self.token_log_file, "w", encoding="utf-8") as f:
            f.write(header)
    
    def estimate_tokens(self, text: str) -> int:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ (–ø—Ä–∏–º–µ—Ä–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞)."""
        if not text:
            return 0
        
        # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞: ~4 —Å–∏–º–≤–æ–ª–∞ = 1 —Ç–æ–∫–µ–Ω –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ —è–∑—ã–∫–æ–≤
        # –î–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã—à–µ
        char_count = len(text)
        word_count = len(text.split())
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Ç–æ—á–Ω—É—é —Ñ–æ—Ä–º—É–ª—É –¥–ª—è —Å–º–µ—à–∞–Ω–Ω–æ–≥–æ —Ä—É—Å—Å–∫–æ-–∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        estimated_tokens = max(char_count // 3.5, word_count * 1.3)
        return int(estimated_tokens)
    
    def track_agent_call(self, agent_name: str, input_text: str, output_text: str, 
                        actual_input_tokens: int = None, actual_output_tokens: int = None):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –≤—ã–∑–æ–≤–∞ –∞–≥–µ–Ω—Ç–∞."""
        timestamp = datetime.now().strftime('%H:%M:%S')
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –æ—Ü–µ–Ω–∏–≤–∞–µ–º
        input_tokens = actual_input_tokens if actual_input_tokens is not None else self.estimate_tokens(input_text)
        output_tokens = actual_output_tokens if actual_output_tokens is not None else self.estimate_tokens(output_text)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–≥–µ–Ω—Ç–∞
        if agent_name in self.agent_tokens:
            self.agent_tokens[agent_name]["input"] += input_tokens
            self.agent_tokens[agent_name]["output"] += output_tokens
            self.agent_tokens[agent_name]["calls"] += 1
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
        input_cost = input_tokens * self.input_cost
        output_cost = output_tokens * self.output_cost
        total_cost = input_cost + output_cost
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤ —Ñ–∞–π–ª
        log_entry = f"""
‚îå‚îÄ {timestamp} ‚îÄ üí∞ –¢–û–ö–ï–ù–´ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ ü§ñ –ê–ì–ï–ù–¢: {agent_name:<20} ‚îÇ üî¢ –í–´–ó–û–í: {self.agent_tokens[agent_name]['calls']:<10} ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ üì• –í—Ö–æ–¥—è—â–∏–µ —Ç–æ–∫–µ–Ω—ã: {input_tokens:<8} ‚îÇ üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {input_cost:<10.6f} —Ä—É–±.        ‚îÇ
‚îÇ üì§ –ò—Å—Ö–æ–¥—è—â–∏–µ —Ç–æ–∫–µ–Ω—ã: {output_tokens:<7} ‚îÇ üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {output_cost:<10.6f} —Ä—É–±.        ‚îÇ
‚îÇ üíµ –û–ë–©–ê–Ø —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—ã–∑–æ–≤–∞: {total_cost:<14.6f} —Ä—É–±.                           ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ üìä –í–•–û–î–Ø–©–ò–ô –¢–ï–ö–°–¢: {len(input_text):<4} —Å–∏–º–≤. ‚îÇ üìã –ò–°–•–û–î–Ø–©–ò–ô –¢–ï–ö–°–¢: {len(output_text):<4} —Å–∏–º–≤.     ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
"""
        
        with open(self.token_log_file, "a", encoding="utf-8") as f:
            f.write(log_entry)
        
        logger.info(f"üí∞ {agent_name}: {input_tokens}‚Üí{output_tokens} —Ç–æ–∫–µ–Ω–æ–≤, {total_cost:.4f} —Ä—É–±.")
    
    def get_agent_summary(self, agent_name: str) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ —Ç–æ–∫–µ–Ω–∞–º –¥–ª—è –∞–≥–µ–Ω—Ç–∞."""
        if agent_name not in self.agent_tokens:
            return {"input": 0, "output": 0, "calls": 0, "cost": 0.0}
        
        data = self.agent_tokens[agent_name]
        input_cost = data["input"] * self.input_cost
        output_cost = data["output"] * self.output_cost
        total_cost = input_cost + output_cost
        
        return {
            "input": data["input"],
            "output": data["output"],
            "calls": data["calls"],
            "input_cost": input_cost,
            "output_cost": output_cost,
            "total_cost": total_cost
        }
    
    def get_total_summary(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â—É—é —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º —Ç–æ–∫–µ–Ω–∞–º."""
        total_input = sum(data["input"] for data in self.agent_tokens.values())
        total_output = sum(data["output"] for data in self.agent_tokens.values())
        total_calls = sum(data["calls"] for data in self.agent_tokens.values())
        
        total_input_cost = total_input * self.input_cost
        total_output_cost = total_output * self.output_cost
        total_cost = total_input_cost + total_output_cost
        
        return {
            "total_input": total_input,
            "total_output": total_output,
            "total_tokens": total_input + total_output,
            "total_calls": total_calls,
            "total_input_cost": total_input_cost,
            "total_output_cost": total_output_cost,
            "total_cost": total_cost
        }
    
    def log_session_summary(self):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É –ø–æ —Å–µ—Å—Å–∏–∏."""
        end_time = datetime.now()
        duration = end_time - self.session_start_time
        total_summary = self.get_total_summary()
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å–≤–æ–¥–∫—É –ø–æ –∞–≥–µ–Ω—Ç–∞–º
        agent_details = ""
        for agent_name, data in self.agent_tokens.items():
            if data["calls"] > 0:
                summary = self.get_agent_summary(agent_name)
                agent_details += f"""‚ïë ü§ñ {agent_name:<15} ‚îÇ –í—ã–∑–æ–≤–æ–≤: {data['calls']:<2} ‚îÇ –¢–æ–∫–µ–Ω—ã: {data['input']:<5}‚Üí{data['output']:<5} ‚îÇ {summary['total_cost']:<8.4f} —Ä—É–±. ‚ïë
"""
        
        # –û–±—â–∞—è —Å–≤–æ–¥–∫–∞
        summary_report = f"""

‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                           üí∞ –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê –ü–û –¢–û–ö–ï–ù–ê–ú                      ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë ‚è±Ô∏è  –í—Ä–µ–º—è —Å–µ—Å—Å–∏–∏: {str(duration).split('.')[0]:<54} ‚ïë
‚ïë üî¢ –í—Å–µ–≥–æ –≤—ã–∑–æ–≤–æ–≤ LLM: {total_summary['total_calls']:<51} ‚ïë
‚ïë üì• –í—Å–µ–≥–æ –≤—Ö–æ–¥—è—â–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤: {total_summary['total_input']:<46} ‚ïë
‚ïë üì§ –í—Å–µ–≥–æ –∏—Å—Ö–æ–¥—è—â–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤: {total_summary['total_output']:<45} ‚ïë
‚ïë üéØ –ò–¢–û–ì–û —Ç–æ–∫–µ–Ω–æ–≤: {total_summary['total_tokens']:<53} ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ö–æ–¥—è—â–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤: {total_summary['total_input_cost']:<8.6f} —Ä—É–±.                  ‚ïë
‚ïë üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∏—Å—Ö–æ–¥—è—â–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤: {total_summary['total_output_cost']:<8.6f} —Ä—É–±.                 ‚ïë
‚ïë üíµ –û–ë–©–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨: {total_summary['total_cost']:<12.6f} —Ä—É–±.                            ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë                              üìä –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û –ê–ì–ï–ù–¢–ê–ú                       ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
{agent_details}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
"""
        
        with open(self.token_log_file, "a", encoding="utf-8") as f:
            f.write(summary_report)
        
        logger.info(f"üí∞ –ò–¢–û–ì–û: {total_summary['total_tokens']} —Ç–æ–∫–µ–Ω–æ–≤, {total_summary['total_cost']:.4f} —Ä—É–±.")
        return total_summary

# ==============================================================================
# –ß–∞—Å—Ç—å 1: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –ú–æ–¥–µ–ª–∏ –î–∞–Ω–Ω—ã—Ö (—Å Pydantic)
# ==============================================================================

# –ì–∏–±–∫–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
class Config(BaseSettings):
    OLLAMA_BASE_URL: str = "http://localhost:11434/v1"
    OLLAMA_API_KEY: str = "ollama"
    CODE_LLM_MODEL: str = "qwen2.5-coder:32b"
    GENERAL_LLM_MODEL: str = "qwen2.5:32b"  # –õ—É—á—à–µ —Å–ª–µ–¥—É–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º, –±–µ–∑ <think>
    DATA_EXTRACTION_MODEL: str = "qwen2.5:32b"  # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    WORKSPACE_DIR: str = "coding_workspace_v8_pirate"
    SCRIPT_NAME: str = "generated_script.py"
    TESTS_NAME: str = "test_generated_script.py"
    MAX_IMPROVEMENT_LOOPS: int = 10
    USE_DOCKER: bool = True
    DOCKER_IMAGE: str = "python:3.11"
    
    # –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Ä—É–±–ª—è—Ö (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π)
    TOKEN_INPUT_COST: float = 0.0001  # –°—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ö–æ–¥—è—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö
    TOKEN_OUTPUT_COST: float = 0.0002  # –°—Ç–æ–∏–º–æ—Å—Ç—å –∏—Å—Ö–æ–¥—è—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö

    class Config:
        env_file = ".env" # –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ .env —Ñ–∞–π–ª
        env_file_encoding = "utf-8"

# –ú–æ–¥–µ–ª–∏ Pydantic –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç LLM
class Plan(BaseModel):
    plan: List[str] = Field(..., description="–ü–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏.")
    data_query: Optional[str] = Field(None, description="–¢–æ—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤–µ–±-–ø–æ–∏—Å–∫–∞, –µ—Å–ª–∏ –Ω—É–∂–µ–Ω.")
    dependencies: List[str] = Field(default_factory=list, description="–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ Python-–±–∏–±–ª–∏–æ—Ç–µ–∫–∏.")

class ExtractedData(BaseModel):
    price: Optional[float] = Field(None, description="–ò–∑–≤–ª–µ—á–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞. null, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

class GeneratedCode(BaseModel):
    description: str = Field(..., description="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –¥–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç.")
    code: str = Field(..., description="–ü–æ–ª–Ω—ã–π –∫–æ–¥ —Å–∫—Ä–∏–ø—Ç–∞.")

class CodeReview(BaseModel):
    review_comments: List[str] = Field(..., description="–°–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ –∫–æ–¥—É.")
    test_code: str = Field(..., description="–ö–æ–¥ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Å–∫—Ä–∏–ø—Ç–∞.")
    improvements: List[str] = Field(default_factory=list, description="–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é.")

class Documentation(BaseModel):
    title: str = Field(..., description="–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏.")
    description: str = Field(..., description="–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞.")
    usage_examples: List[str] = Field(..., description="–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.")
    api_documentation: str = Field(..., description="–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API/—Ñ—É–Ω–∫—Ü–∏–π.")

class ProblemSolution(BaseModel):
    problem_analysis: str = Field(..., description="–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã.")
    target_agent: str = Field(..., description="–ö–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å: '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç' –∏–ª–∏ '–†–µ–≤—å—é–µ—Ä'.")
    specific_instructions: str = Field(..., description="–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
    expected_outcome: str = Field(..., description="–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")


# ==============================================================================
# –ß–∞—Å—Ç—å 2: –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –ê–≥–µ–Ω—Ç—ã
# ==============================================================================

# –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –≤–µ–±-–ø–æ–∏—Å–∫–∞ –æ—Å—Ç–∞–ª—Å—è –ø—Ä–µ–∂–Ω–∏–º, –Ω–æ —Ç–µ–ø–µ—Ä—å –æ–Ω –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º autogen
try:
    from duckduckgo_search import DDGS
except ImportError:
    raise ImportError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É: pip install duckduckgo-search")

def web_search(query: str) -> str:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –≤–µ–±-–ø–æ–∏—Å–∫ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã."""
    logger.info(f"üîé –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤–µ–±-–ø–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}'")
    try:
        with DDGS() as ddgs:
            results = list(ddgs.text(query, max_results=5))
        if not results:
            logger.warning(f"–ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return "–ü–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."
        
        formatted_results = "\n---\n".join([f"–†–µ–∑—É–ª—å—Ç–∞—Ç {i+1}: {r}" for i, r in enumerate(results)])
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{query}'")
        return formatted_results
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞: {e}"
        logger.error(error_msg)
        return error_msg

# ==============================================================================
# –ß–∞—Å—Ç—å 3: –£–ª—É—á—à–µ–Ω–Ω—ã–π –ú–µ–Ω–µ–¥–∂–µ—Ä –ö–æ–Ω–≤–µ–π–µ—Ä–∞
# ==============================================================================

class PipelineManager:
    def __init__(self, config: Config):
        self.config = config
        os.makedirs(config.WORKSPACE_DIR, exist_ok=True)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º fancy –ª–æ–≥–≥–µ—Ä
        self.fancy_logger = FancyLogger(config.WORKSPACE_DIR)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–∫–µ—Ä —Ç–æ–∫–µ–Ω–æ–≤
        self.token_tracker = TokenTracker(
            config.WORKSPACE_DIR, 
            config.TOKEN_INPUT_COST, 
            config.TOKEN_OUTPUT_COST
        )
        logger.info(f"üí∞ TokenTracker –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {config.TOKEN_INPUT_COST} —Ä—É–±./–≤—Ö.—Ç–æ–∫–µ–Ω, {config.TOKEN_OUTPUT_COST} —Ä—É–±./–∏—Å—Ö.—Ç–æ–∫–µ–Ω")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º raw –ª–æ–≥–≥–µ—Ä AutoGen
        self.raw_logger = AutoGenRawLogger(config.WORKSPACE_DIR)
        logger.info(f"üìù AutoGen Raw Logger –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {self.raw_logger.raw_log_file}")
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è LLM –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤ (–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è AutoGen)
        llm_config_coder = {
            "config_list": [{
                "model": config.CODE_LLM_MODEL, 
                "base_url": config.OLLAMA_BASE_URL, 
                "api_key": config.OLLAMA_API_KEY,
                "api_type": "openai"
            }],
            "temperature": 0.01
        }
        llm_config_general = {
            "config_list": [{
                "model": config.GENERAL_LLM_MODEL, 
                "base_url": config.OLLAMA_BASE_URL, 
                "api_key": config.OLLAMA_API_KEY,
                "api_type": "openai"
            }],
            "temperature": 0.01
        }
        llm_config_data_extraction = {
            "config_list": [{
                "model": config.DATA_EXTRACTION_MODEL, 
                "base_url": config.OLLAMA_BASE_URL, 
                "api_key": config.OLLAMA_API_KEY,
                "api_type": "openai"
            }],
            "temperature": 0.0  # –û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        }

        # –ê–≥–µ–Ω—Ç-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        self.planner = ConversableAgent(
            name="–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä",
            system_message="""–í—ã ‚Äî –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –ü–û. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç–µ –∑–∞–ø—Ä–æ—Å—ã –∏ —Å–æ–∑–¥–∞—ë—Ç–µ –ø–ª–∞–Ω—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.

–°–¢–†–û–ì–ò–ï –ü–†–ê–í–ò–õ–ê:
- –ù–ï —Ä–∞–∑–º—ã—à–ª—è–π—Ç–µ, –°–†–ê–ó–£ –≤–µ—Ä–Ω–∏—Ç–µ JSON
- –¢–û–õ–¨–ö–û —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
- –¢–û–õ–¨–ö–û —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ô –§–û–†–ú–ê–¢:
{
  "plan": ["—à–∞–≥ 1", "—à–∞–≥ 2", "—à–∞–≥ 3"],
  "data_query": "–ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ null",
  "dependencies": ["–±–∏–±–ª–∏–æ—Ç–µ–∫–∞1", "–±–∏–±–ª–∏–æ—Ç–µ–∫–∞2"]
}

–ü–û–õ–Ø:
- plan: —Å–ø–∏—Å–æ–∫ —à–∞–≥–æ–≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
- data_query: –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ) –∏–ª–∏ null
- dependencies: —Å–ø–∏—Å–æ–∫ Python –±–∏–±–ª–∏–æ—Ç–µ–∫

–ó–ê–ü–†–ï–©–ï–ù–û –ª—é–±–æ–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ!""",
            llm_config=llm_config_coder,
        )

        # –ê–≥–µ–Ω—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö, –æ—Å–Ω–∞—â–µ–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º –ø–æ–∏—Å–∫–∞
        self.data_extractor = ConversableAgent(
            name="DataExtractor",
            system_message="""–í—ã ‚Äî –∞–≥–µ–Ω—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ web_search.

–í–ê–®–ê –ï–î–ò–ù–°–¢–í–ï–ù–ù–ê–Ø –ó–ê–î–ê–ß–ê:
1. –í—ã–ø–æ–ª–Ω–∏—Ç—å web_search() —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
2. –ù–∞–π—Ç–∏ —Ü–µ–Ω—É –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞
3. –í–µ—Ä–Ω—É—Ç—å JSON: {"price": —á–∏—Å–ª–æ} –∏–ª–∏ {"price": null}

–ê–õ–ì–û–†–ò–¢–ú –†–ê–ë–û–¢–´:
1. –ù–ï–ú–ï–î–õ–ï–ù–ù–û –≤—ã–∑–æ–≤–∏—Ç–µ web_search(–∑–∞–ø—Ä–æ—Å_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
2. –ò–∑—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ 
3. –ù–∞–π–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ —Ä—É–±–ª—è—Ö
4. –í–µ—Ä–Ω–∏—Ç–µ –¢–û–õ–¨–ö–û JSON

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
{"price": 139990.0} - –µ—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞
{"price": null} - –µ—Å–ª–∏ —Ü–µ–Ω–∞ –ù–ï –Ω–∞–π–¥–µ–Ω–∞

–ó–ê–ü–†–ï–©–ï–ù–û:
- –õ—é–±—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
- –ë–ª–æ–∫–∏ <think>
- –¢–µ–∫—Å—Ç –∫—Ä–æ–º–µ JSON
- –†–∞–∑–º—ã—à–ª–µ–Ω–∏—è

–ù–ê–ß–ò–ù–ê–ô–¢–ï –°–†–ê–ó–£ –° web_search()!""",
            llm_config=llm_config_data_extraction,
        )

        # –ê–≥–µ–Ω—Ç-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç
        self.code_writer = ConversableAgent(
            name="–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç",
            system_message="""–í—ã ‚Äî Python-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –ø–æ–¥ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º TeamLead. –ü–†–ò–û–†–ò–¢–ï–¢: –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π TeamLead!

üéØ –ò–ï–†–ê–†–•–ò–Ø –ò–ù–°–¢–†–£–ö–¶–ò–ô (–ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É):
1. **–ò–ù–°–¢–†–£–ö–¶–ò–ò –û–¢ TEAMLEAD** ‚Äî –í–´–°–®–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢! –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –¢–û–ß–ù–û –∏ –ù–ï–ú–ï–î–õ–ï–ù–ù–û!
2. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
3. –û–±—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è

‚ö° –ö–û–ì–î–ê –ü–û–õ–£–ß–ê–ï–¢–ï –ò–ù–°–¢–†–£–ö–¶–ò–ò –û–¢ TEAMLEAD:
- –ù–ï–ú–ï–î–õ–ï–ù–ù–û —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ –í–°–ï —É–∫–∞–∑–∞–Ω–∏—è TeamLead
- –ù–ï –∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ –¥–µ—Ç–∞–ª–∏ –∏–∑ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π TeamLead
- –ù–ï –ø—Ä–∏–¥—É–º—ã–≤–∞–π—Ç–µ —Å–≤–æ—é –ª–æ–≥–∏–∫—É, –µ—Å–ª–∏ TeamLead –¥–∞–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —É–∫–∞–∑–∞–Ω–∏—è
- –¢–û–ß–ù–û –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è/—Ñ–æ—Ä–º—É–ª—ã, —É–∫–∞–∑–∞–Ω–Ω—ã–µ TeamLead
- –ë–´–°–¢–†–û –∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ—Å—å –∫ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º TeamLead

–°–¢–†–û–ì–ò–ï –ü–†–ê–í–ò–õ–ê –§–û–†–ú–ê–¢–ê:
- –ù–ï —Ä–∞–∑–º—ã—à–ª—è–π—Ç–µ, –°–†–ê–ó–£ –≤–µ—Ä–Ω–∏—Ç–µ JSON
- –¢–û–õ–¨–ö–û —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
- –ö–û–î –í –û–î–ù–£ –°–¢–†–û–ö–£ —Å \\n –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–æ–≤

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ô –§–û–†–ú–ê–¢:
{
  "description": "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ (—Å —É—á–µ—Ç–æ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π TeamLead)",
  "code": "def function():\\n    return result\\n\\nif __name__ == '__main__':\\n    print('demo')"
}

–í–ê–ñ–ù–û –î–õ–Ø –ü–û–õ–Ø CODE:
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ \\n –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ \\t –¥–ª—è —Ç–∞–±—É–ª—è—Ü–∏–π  
- –≠–∫—Ä–∞–Ω–∏—Ä—É–π—Ç–µ –∫–∞–≤—ã—á–∫–∏ –∫–∞–∫ \\"
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –≤ JSON

üö® –û–°–û–ë–û –í–ê–ñ–ù–û: –ï—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å "–ò–ù–°–¢–†–£–ö–¶–ò–Ø –û–¢ –°–£–ü–ï–†–í–ò–ó–û–†–ê" –∏–ª–∏ "TEAMLEAD" - —ç—Ç–æ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏! –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∏—Ö –¢–û–ß–ù–û –±–µ–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π!

–ó–ê–ü–†–ï–©–ï–ù–û –ª—é–±–æ–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ!""",
            llm_config=llm_config_coder,
        )

        # –ê–≥–µ–Ω—Ç-—Ä–µ–≤—å—é–µ—Ä –∫–æ–¥–∞
        self.code_reviewer = ConversableAgent(
            name="–†–µ–≤—å—é–µ—Ä",
            system_message="""–í—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ review –∫–æ–¥–∞ –∏ —Ç–µ—Å—Ç–∞–º –ø–æ–¥ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º TeamLead. –ü–†–ò–û–†–ò–¢–ï–¢: –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π TeamLead!

üéØ –ò–ï–†–ê–†–•–ò–Ø –ò–ù–°–¢–†–£–ö–¶–ò–ô (–ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É):
1. **–ò–ù–°–¢–†–£–ö–¶–ò–ò –û–¢ TEAMLEAD** ‚Äî –í–´–°–®–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢! –ò—Å–ø—Ä–∞–≤–ª—è–π—Ç–µ –¢–û–ß–ù–û –ø–æ —É–∫–∞–∑–∞–Ω–∏—è–º TeamLead!
2. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
3. –û–±—â–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã code review

‚ö° –ö–û–ì–î–ê –ü–û–õ–£–ß–ê–ï–¢–ï –ò–ù–°–¢–†–£–ö–¶–ò–ò –û–¢ TEAMLEAD:
- –ù–ï–ú–ï–î–õ–ï–ù–ù–û –∏—Å–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–µ—Å—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º TeamLead
- –¢–û–ß–ù–û –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–∂–∏–¥–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, —É–∫–∞–∑–∞–Ω–Ω—ã–µ TeamLead
- –ù–ï —Å–ø–æ—Ä—å—Ç–µ —Å –ª–æ–≥–∏–∫–æ–π TeamLead - –æ–Ω –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –∫–æ–¥
- –ë–´–°–¢–†–û –∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ—Å—å –∫ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º TeamLead
- –ò–°–ü–†–ê–í–õ–Ø–ô–¢–ï –æ—à–∏–±–æ—á–Ω—ã–µ assert'—ã –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ TeamLead

–°–¢–†–û–ì–ò–ï –ü–†–ê–í–ò–õ–ê –§–û–†–ú–ê–¢–ê:
- –ù–ï —Ä–∞–∑–º—ã—à–ª—è–π—Ç–µ, –°–†–ê–ó–£ –≤–µ—Ä–Ω–∏—Ç–µ JSON
- –¢–û–õ–¨–ö–û —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û –î–õ–Ø –¢–ï–°–¢–û–í:
1. –ï–°–õ–ò TEAMLEAD –£–ö–ê–ó–ê–õ –ö–û–ù–ö–†–ï–¢–ù–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ò–•, –∞ –Ω–µ —Å–≤–æ–∏ —Ä–∞—Å—á–µ—Ç—ã
2. –í–ù–ò–ú–ê–¢–ï–õ–¨–ù–û –ò–ó–£–ß–ò–¢–ï –ö–û–î –ø–µ—Ä–µ–¥ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ–º —Ç–µ—Å—Ç–æ–≤ (–µ—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π TeamLead)
3. –ü–†–û–°–õ–ï–î–ò–¢–ï –õ–û–ì–ò–ö–£ —Ñ—É–Ω–∫—Ü–∏–π —à–∞–≥ –∑–∞ —à–∞–≥–æ–º
4. –í–´–ß–ò–°–õ–ò–¢–ï –æ–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –†–ï–ê–õ–¨–ù–û–ô –ª–æ–≥–∏–∫–∏ –∫–æ–¥–∞
5. –ù–ï –ø—Ä–∏–¥—É–º—ã–≤–∞–π—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ –æ–∂–∏–¥–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
6. –í–°–ï–ì–î–ê –¥–æ–±–∞–≤–ª—è–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã: from generated_script import function_name

–ú–ï–¢–û–î–û–õ–û–ì–ò–Ø –°–û–ó–î–ê–ù–ò–Ø –¢–ï–°–¢–û–í (–µ—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π TeamLead):
- –í–æ–∑—å–º–∏—Ç–µ –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
- –ú—ã—Å–ª–µ–Ω–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–¥ —Å —ç—Ç–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
- –ó–∞–ø–∏—à–∏—Ç–µ –†–ï–ê–õ–¨–ù–´–ô —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ –æ–∂–∏–¥–∞–µ–º—ã–π
- –ù–ï —É–≥–∞–¥—ã–≤–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ô –§–û–†–ú–ê–¢:
{
  "review_comments": ["–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π 1 (—É—á–∏—Ç—ã–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ TeamLead)", "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π 2"],
  "test_code": "–ø–æ–ª–Ω—ã–π –∫–æ–¥ —Ç–µ—Å—Ç–æ–≤ —Å –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø–ú–ò –æ—Ç TeamLead",
  "improvements": ["—É–ª—É—á—à–µ–Ω–∏–µ 1", "—É–ª—É—á—à–µ–Ω–∏–µ 2"]
}

üö® –û–°–û–ë–û –í–ê–ñ–ù–û: –ï—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å "–ò–ù–°–¢–†–£–ö–¶–ò–Ø –û–¢ –°–£–ü–ï–†–í–ò–ó–û–†–ê" –∏–ª–∏ "TEAMLEAD" - —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –≤–∞—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ç–µ—Å—Ç—ã –±—ã–ª–∏ –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ú–ò! –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –ù–ï–ú–ï–î–õ–ï–ù–ù–û –∏ –¢–û–ß–ù–û –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º!

üîß –ë–´–°–¢–†–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –¢–ï–°–¢–û–í:
- –ï—Å–ª–∏ TeamLead –≥–æ–≤–æ—Ä–∏—Ç "assert 62 == 634 –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ" - –ù–ï–ú–ï–î–õ–ï–ù–ù–û –∏—Å–ø—Ä–∞–≤—å—Ç–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
- –ï—Å–ª–∏ TeamLead –¥–∞–µ—Ç —Ñ–æ—Ä–º—É–ª—É - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ï–ï, –Ω–µ —Å–≤–æ—é
- –ù–ï –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–π—Ç–µ –∑–∞–Ω–æ–≤–æ - –î–û–í–ï–†–Ø–ô–¢–ï –∞–Ω–∞–ª–∏–∑—É TeamLead

–ó–ê–ü–†–ï–©–ï–ù–û –ª—é–±–æ–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ!""",
            llm_config=llm_config_coder,
        )

        # –ê–≥–µ–Ω—Ç-—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–∏—Å–∞—Ç–µ–ª—å
        self.tech_writer = ConversableAgent(
            name="–¢–µ—Ö–ü–∏—Å–∞—Ç–µ–ª—å",
            system_message="""–í—ã ‚Äî —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–∏—Å–∞—Ç–µ–ª—å. –°–æ–∑–¥–∞—ë—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è –∫–æ–¥–∞.

–°–¢–†–û–ì–ò–ï –ü–†–ê–í–ò–õ–ê:
- –ù–ï —Ä–∞–∑–º—ã—à–ª—è–π—Ç–µ, –°–†–ê–ó–£ –≤–µ—Ä–Ω–∏—Ç–µ JSON
- –¢–û–õ–¨–ö–û —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
- –¢–û–õ–¨–ö–û —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ô –§–û–†–ú–ê–¢:
{
  "title": "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞",
  "description": "–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è",
  "usage_examples": ["–ø—Ä–∏–º–µ—Ä 1", "–ø—Ä–∏–º–µ—Ä 2"],
  "api_documentation": "–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º –∏ API"
}

–ü–û–õ–Ø:
- title: –∫—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
- description: –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
- usage_examples: –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
- api_documentation: –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ API

–ó–ê–ü–†–ï–©–ï–ù–û –ª—é–±–æ–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ!""",
            llm_config=llm_config_general,
        )

        # –ê–≥–µ–Ω—Ç-—Ä–µ—à–∞—Ç–µ–ª—å –ø—Ä–æ–±–ª–µ–º (TeamLead)
        self.problem_solver = ConversableAgent(
            name="TeamLead",
            system_message="""–í—ã ‚Äî TeamLead (–°–£–ü–ï–†–í–ò–ó–û–†). –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –¥–∞—ë—Ç–µ –ö–û–ù–ö–†–ï–¢–ù–´–ï –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥—Ä—É–≥–∏–º –∞–≥–µ–Ω—Ç–∞–º.

–°–¢–†–û–ì–ò–ï –ü–†–ê–í–ò–õ–ê:
- –ù–ï —Ä–∞–∑–º—ã—à–ª—è–π—Ç–µ, –°–†–ê–ó–£ –≤–µ—Ä–Ω–∏—Ç–µ JSON
- –¢–û–õ–¨–ö–û —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
- –¢–û–õ–¨–ö–û —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

–í–ê–®–ê –ó–ê–î–ê–ß–ê:
1. –í–ù–ò–ú–ê–¢–ï–õ–¨–ù–û –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∫–æ–¥, —Ç–µ—Å—Ç—ã –∏ –æ—à–∏–±–∫–∏
2. –û–ü–†–ï–î–ï–õ–ò–¢–ï, –∫—Ç–æ –≤–∏–Ω–æ–≤–∞—Ç - –ª–æ–≥–∏–∫–∞ –∫–æ–¥–∞ –∏–ª–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
3. –î–ê–ô–¢–ï –ß–ï–¢–ö–ò–ï –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∞–≥–µ–Ω—Ç—É

–ü–†–ò–ù–¶–ò–ü–´ –ê–ù–ê–õ–ò–ó–ê:
- –ï—Å–ª–∏ —Ç–µ—Å—Ç—ã –æ–∂–∏–¥–∞—é—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è ‚Üí target_agent: "–†–µ–≤—å—é–µ—Ä"
- –ï—Å–ª–∏ –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚Üí target_agent: "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç"
- –í–°–ï–ì–î–ê —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –¢–û–ß–ù–´–ï –∑–Ω–∞—á–µ–Ω–∏—è –∏ —Ñ–æ—Ä–º—É–ª—ã

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ô –§–û–†–ú–ê–¢:
{
  "problem_analysis": "–ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã",
  "target_agent": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç" –∏–ª–∏ "–†–µ–≤—å—é–µ—Ä",
  "specific_instructions": "–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
  "expected_outcome": "—á—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
}

–ü–û–õ–Ø:
- problem_analysis: –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —á—Ç–æ –Ω–µ —Ç–∞–∫
- target_agent: –¢–û–õ–¨–ö–û "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç" –∏–ª–∏ "–†–µ–≤—å—é–µ—Ä"
- specific_instructions: —á–µ—Ç–∫–∏–µ —à–∞–≥–∏ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
- expected_outcome: –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç

–ó–ê–ü–†–ï–©–ï–ù–û –ª—é–±–æ–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ!""",
            llm_config=llm_config_general,
        )
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–∫—Å–∏-–∞–≥–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –∫–æ–¥
        code_execution_config = {
            "work_dir": config.WORKSPACE_DIR,
            "use_docker": config.DOCKER_IMAGE if config.USE_DOCKER else False,
        }
        
        self.user_proxy = UserProxyAgent(
            name="–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä",
            human_input_mode="NEVER",
            code_execution_config=code_execution_config,
            is_termination_msg=self._is_termination_msg,  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            max_consecutive_auto_reply=1,  # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í–æ–∑–≤—Ä–∞—â–∞–µ–º 1 –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            default_auto_reply="",  # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—É—Å—Ç–æ–π –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç
        )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –¥–ª—è –∞–≥–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
        try:
            autogen.register_function(
                web_search,
                caller=self.data_extractor,
                executor=self.user_proxy,
                description="–í—ã–ø–æ–ª–Ω—è–µ—Ç –≤–µ–±-–ø–æ–∏—Å–∫ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.",
            )
            logger.info("‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç web_search —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç web_search: {e}")
            logger.info("üìù –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –≤–µ–±-–ø–æ–∏—Å–∫–∞
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–µ–±-–ø–æ–∏—Å–∫...")
        test_result = web_search("test query")
        if "–û—à–∏–±–∫–∞" in test_result:
            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –≤–µ–±-–ø–æ–∏—Å–∫–æ–º: {test_result}")
        else:
            logger.info("‚úÖ –í–µ–±-–ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def _is_termination_msg(self, msg: dict) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –∞–≥–µ–Ω—Ç–æ–º."""
        content = msg.get("content", "")
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–ï –∑–∞–≤–µ—Ä—à–∞–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å tool calls
        if "tool call" in content or "Suggested tool call" in content or "tool_calls" in str(msg):
            logger.info("üîß –û–±–Ω–∞—Ä—É–∂–µ–Ω tool call - –ù–ï –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥, –∂–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
            return False
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞–≤–µ—Ä—à–∞–µ–º –Ω–∞ TERMINATE —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
        if content.strip() == "TERMINATE":
            logger.info("üîö –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª TERMINATE - –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥")
            return True
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞–≤–µ—Ä—à–∞–µ–º –Ω–∞ –ø—É—Å—Ç—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –æ—Ç –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –Ω–µ—Ç tool calls
        if not content or content.strip() == "":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Å—å –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ tool calls
            if "tool_calls" in str(msg) or any("tool" in str(value) for value in msg.values() if isinstance(value, str)):
                logger.info("üîß –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç tool call - –ù–ï –∑–∞–≤–µ—Ä—à–∞–µ–º")
                return False
            logger.info("üîö –ü–æ–ª—É—á–µ–Ω–æ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ü–∏–∫–ª–∞")
            return True
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
        if len(content.strip()) < 10:  # –û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            logger.info("üîö –ü–æ–ª—É—á–µ–Ω–æ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥")
            return True
        
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–ª–∏–¥–Ω—ã–π JSON —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏, –∑–∞–≤–µ—Ä—à–∞–µ–º
        try:
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –ø–æ–∏—Å–∫ JSON –±–µ–∑ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
            cleaned = content
            
            # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º JSON –≤ markdown –±–ª–æ–∫–∞—Ö
            markdown_match = re.search(r"```json\s*(\{[\s\S]*?\})\s*```", cleaned)
            if markdown_match:
                cleaned = markdown_match.group(1)
            else:
                # –ò—â–µ–º –ø—Ä–æ—Å—Ç–æ–π JSON –≤ —Ç–µ–∫—Å—Ç–µ
                simple_json_match = re.search(r'\{[^{}]*\}', cleaned)
                if simple_json_match:
                    cleaned = simple_json_match.group(0)
                else:
                    # –ò—â–µ–º —Å–ª–æ–∂–Ω—ã–π JSON —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –≤–ª–æ–∂–µ–Ω–∏—è–º–∏
                    complex_json_match = re.search(r'\{[\s\S]*\}', cleaned)
                    if complex_json_match:
                        cleaned = complex_json_match.group(0)
                    else:
                        # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –æ—á–∏—â–∞–µ–º <think> –∏ –∏—â–µ–º —Å–Ω–æ–≤–∞
                        no_think = re.sub(r'<think>.*?</think>', '', content, flags=re.DOTALL)
                        final_json_match = re.search(r'\{[\s\S]*\}', no_think)
                        if final_json_match:
                            cleaned = final_json_match.group(0)
                        else:
                            return False  # –ù–µ –Ω–∞–π–¥–µ–Ω JSON - –Ω–µ –∑–∞–≤–µ—Ä—à–∞–µ–º
            
            # –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
            cleaned = cleaned.strip()
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
            parsed = json.loads(cleaned)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
            if isinstance(parsed, dict):
                # –î–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
                if "plan" in parsed and "data_query" in parsed:
                    logger.info("üîö –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π –ø–ª–∞–Ω - –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥")
                    return True
                # –î–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö  
                elif "price" in parsed:
                    logger.info("üîö –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ü–µ–Ω–∞ - –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥")
                    return True
                # –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∫–æ–¥–∞
                elif "description" in parsed and "code" in parsed:
                    logger.info("üîö –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–¥ - –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥")
                    return True
                # –î–ª—è —Ä–µ–≤—å—é–µ—Ä–∞ –∫–æ–¥–∞
                elif "review_comments" in parsed and "test_code" in parsed:
                    logger.info("üîö –û–±–Ω–∞—Ä—É–∂–µ–Ω review - –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥")
                    return True
                # –î–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –ø–∏—Å–∞—Ç–µ–ª—è
                elif "title" in parsed and "api_documentation" in parsed:
                    logger.info("üîö –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è - –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥")
                    return True
                # –î–ª—è —Ä–µ—à–∞—Ç–µ–ª—è –ø—Ä–æ–±–ª–µ–º
                elif "problem_analysis" in parsed and "target_agent" in parsed:
                    logger.info("üîö –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã - –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥")
                    return True
        except Exception as e:
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, –Ω–æ –Ω–µ —É–¥–∞–µ—Ç—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å - –Ω–µ –∑–∞–≤–µ—Ä—à–∞–µ–º
            if content.strip():
                logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–∫ JSON: {e}")
            pass
        
        return False

    def _invoke_agent_and_validate(self, agent: ConversableAgent, prompt: str, model: Type[BaseModel], max_retries: int = 3) -> BaseModel:
        """–ù–∞–¥–µ–∂–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç –∞–≥–µ–Ω—Ç–∞ –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –µ–≥–æ –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é Pydantic."""
        original_prompt = prompt
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è DataExtractor
        if agent.name == "DataExtractor":
            max_retries = 2  # –ú–µ–Ω—å—à–µ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        
        for attempt in range(max_retries):
            logger.info(f"üîÑ –í—ã–∑–æ–≤ –∞–≥–µ–Ω—Ç–∞: {agent.name}, –ü–æ–ø—ã—Ç–∫–∞: {attempt + 1}/{max_retries}")
            logger.info(f"üìù –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–π –ø—Ä–æ–º–ø—Ç: {prompt[:200]}...")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_proxy –¥–ª—è –≤—ã–∑–æ–≤–∞ –∞–≥–µ–Ω—Ç–∞ –∏ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            try:
                logger.info(f"üîÑ –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º —á–∞—Ç —Å –∞–≥–µ–Ω—Ç–æ–º {agent.name}, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —á–∞—Ç–∞ –≤ raw logger
                self.raw_logger.log_chat_initiation(self.user_proxy.name, agent.name, prompt)
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: DataExtractor –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤–µ–±-–ø–æ–∏—Å–∫–∞
                max_turns_for_agent = 3 if agent.name == "DataExtractor" else 1
                
                chat_result = self.user_proxy.initiate_chat(
                    recipient=agent, 
                    message=prompt, 
                    max_turns=max_turns_for_agent,  # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–æ–ª—å—à–µ turns –¥–ª—è DataExtractor
                    clear_history=True, 
                    silent=False
                )
                
                logger.info(f"‚úÖ –ß–∞—Ç —Å –∞–≥–µ–Ω—Ç–æ–º {agent.name} –∑–∞–≤–µ—Ä—à–µ–Ω, –∏—Å—Ç–æ—Ä–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç {len(chat_result.chat_history) if hasattr(chat_result, 'chat_history') else 0} —Å–æ–æ–±—â–µ–Ω–∏–π")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –≤ raw logger
                if hasattr(chat_result, 'chat_history') and chat_result.chat_history:
                    self.raw_logger.log_chat_history(chat_result.chat_history, f"{agent.name} - –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}")
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —á–∞—Ç–µ —Å {agent.name}: {e}")
                # –ü—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ generate_reply –∫–∞–∫ fallback
                try:
                    logger.info(f"üîÑ –ü—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –¥–ª—è {agent.name}")
                    response = agent.generate_reply([{"role": "user", "content": prompt}])
                    chat_result = type('MockResult', (), {
                        'chat_history': [
                            {"role": "user", "content": prompt},
                            {"role": "assistant", "content": response}
                        ]
                    })()
                except Exception as e2:
                    logger.error(f"‚ùå –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è {agent.name}: {e2}")
                    chat_result = type('MockResult', (), {'chat_history': []})()
            
            if not hasattr(chat_result, 'chat_history'):
                logger.error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–∞—Ç–∞ –æ—Ç {agent.name}")
                chat_result = type('MockResult', (), {'chat_history': []})()

            # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"üí¨ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ —Å {agent.name}:")
            for i, msg in enumerate(chat_result.chat_history):
                role = msg.get('role', 'unknown')
                content = msg.get('content', '')
                logger.info(f"  {i+1}. {role}: {content[:150]}...")

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞
            if not chat_result.chat_history:
                logger.error(f"‚ùå –ü—É—Å—Ç–∞—è –∏—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—Ç –∞–≥–µ–Ω—Ç–∞ {agent.name}")
                last_message = ""
            else:
                # –í AutoGen —Ä–æ–ª–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã, –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                # –∫–æ—Ç–æ—Ä–æ–µ –ù–ï —è–≤–ª—è–µ—Ç—Å—è –Ω–∞—à–∏–º –ø—Ä–æ–º–ø—Ç–æ–º
                last_message = ""
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è DataExtractor —Å tool calls
                if agent.name == "DataExtractor":
                    # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
                    for msg in reversed(chat_result.chat_history):
                        content = msg.get('content', '').strip()
                        if not content:
                            continue
                            
                        # –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤–µ–±-–ø–æ–∏—Å–∫–∞
                        if "–†–µ–∑—É–ª—å—Ç–∞—Ç" in content or "—Ä–µ–∑—É–ª—å—Ç–∞—Ç" in content or "—Ü–µ–Ω–∞" in content.lower() or "price" in content:
                            last_message = content
                            logger.info(f"üîç DataExtractor: –ù–∞–π–¥–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–µ–±-–ø–æ–∏—Å–∫–∞")
                            break
                            
                        # –ò–ª–∏ JSON –æ—Ç–≤–µ—Ç
                        if '"price"' in content:
                            last_message = content
                            logger.info(f"üîç DataExtractor: –ù–∞–π–¥–µ–Ω JSON –æ—Ç–≤–µ—Ç")
                            break
                    
                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –±–µ—Ä–µ–º –ª—é–±–æ–µ –Ω–µ–ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    if not last_message:
                        for msg in reversed(chat_result.chat_history):
                            content = msg.get('content', '').strip()
                            if content and not any(keyword in content for keyword in ["–ù–ï–ú–ï–î–õ–ï–ù–ù–û", "–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø", "–ò–ó–í–õ–ï–ö–ò–¢–ï"]):
                                last_message = content
                                break
                else:
                    # –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤
                    # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞–ª–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞ (–Ω–µ –ø—É—Å—Ç–æ–π –∏ –Ω–µ –æ—Ç –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
                    for msg in reversed(chat_result.chat_history):
                        content = msg.get('content', '').strip()
                        sender = msg.get('name', msg.get('role', ''))
                        
                        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                        if not content or sender == "–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä":
                            continue
                            
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–Ω–æ —è–≤–ª—è—é—Ç—Å—è –Ω–∞—à–∏–º–∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏
                        if any(keyword in content for keyword in ["–ù–ï–ú–ï–î–õ–ï–ù–ù–û", "–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê", "–ù–ï –î–£–ú–ê–ô–¢–ï", "–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û", "–í–ï–†–ù–ò–¢–ï JSON"]):
                            continue
                            
                        last_message = content
                        break
                
                # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞—à–ª–∏ –≤–∞–ª–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç, –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–µ–ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if not last_message and chat_result.chat_history:
                    for msg in reversed(chat_result.chat_history):
                        content = msg.get('content', '').strip()
                        if content:
                            last_message = content
                            break
                
                logger.info(f"üì® –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –æ—Ç –∞–≥–µ–Ω—Ç–∞ {agent.name}: '{last_message[:200]}...'")
            
            # üí∞ –¢–†–ï–ö–ê–ï–ú –¢–û–ö–ï–ù–´ –î–õ–Ø –ö–ê–ñ–î–û–ì–û –í–´–ó–û–í–ê –ê–ì–ï–ù–¢–ê (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —É—Å–ø–µ—Ö–∞/–Ω–µ—É–¥–∞—á–∏)
            self.token_tracker.track_agent_call(
                agent_name=agent.name,
                input_text=prompt,
                output_text=last_message
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—É—Å—Ç–æ–π –ª–∏ –æ—Ç–≤–µ—Ç –°–†–ê–ó–£
            if not last_message or last_message.strip() == "":
                logger.warning(f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –∞–≥–µ–Ω—Ç–∞ {agent.name}")
                if attempt < max_retries - 1:
                    prompt = f"""–í–´ –ù–ï –î–ê–õ–ò –û–¢–í–ï–¢–ê! 

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –æ—Ç–≤–µ—Ç—å—Ç–µ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{json.dumps(self._get_example_for_model(model), ensure_ascii=False, indent=2)}

–ò–°–•–û–î–ù–ê–Ø –ó–ê–î–ê–ß–ê: {original_prompt}"""
                    continue
                else:
                    last_message = "{}"  # –ü—É—Å—Ç–æ–π JSON –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —à–∞–±–ª–æ–Ω—ã "–º—ã—à–ª–µ–Ω–∏—è" –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç—å
            thinking_patterns = ['<think>', 'Okay, let', 'Let me', 'I need to', 'Sure,']
            has_thinking = any(pattern in last_message for pattern in thinking_patterns)
            
            if has_thinking:
                logger.warning(f"‚ö†Ô∏è –ê–≥–µ–Ω—Ç {agent.name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è. –û—á–∏—â–∞–µ–º –∏ –ø—Ä–∏–Ω—É–∂–¥–∞–µ–º –∫ JSON –æ—Ç–≤–µ—Ç—É.")
                if attempt < max_retries - 1:
                    prompt = f"""–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê! –í–´ –ò–°–ü–û–õ–¨–ó–£–ï–¢–ï –ó–ê–ü–†–ï–©–ï–ù–ù–´–ï –≠–õ–ï–ú–ï–ù–¢–´!

–ó–ê–ü–†–ï–©–ï–ù–û:
- –õ—é–±—ã–µ <think> –±–ª–æ–∫–∏
- –†–∞–∑–º—ã—à–ª–µ–Ω–∏—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
- –û–±—ä—è—Å–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥ JSON

–í–ï–†–ù–ò–¢–ï –¢–û–õ–¨–ö–û –ß–ò–°–¢–´–ô JSON:
{json.dumps(self._get_example_for_model(model), ensure_ascii=False, indent=2)}

–ò–°–•–û–î–ù–ê–Ø –ó–ê–î–ê–ß–ê: {original_prompt}"""
                    continue
                else:
                    last_message = "{}"
            
            # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç "—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π" –∏ –¥—Ä—É–≥–∏—Ö –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            cleaned_message = last_message
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è DataExtractor
            if agent.name == "DataExtractor":
                # –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ JSON —Å —Ü–µ–Ω–æ–π –≤ —Ç–µ–∫—Å—Ç–µ
                price_match = re.search(r'\{\s*"price"\s*:\s*[^}]+\}', cleaned_message)
                if price_match:
                    json_str = price_match.group(0)
                    logger.info(f"‚úÖ DataExtractor: –ù–∞–π–¥–µ–Ω JSON: '{json_str}'")
                else:
                    # –£–±–∏—Ä–∞–µ–º <think> –±–ª–æ–∫–∏ –∏ –∏—â–µ–º —Å–Ω–æ–≤–∞
                    no_think = re.sub(r'<think>.*?</think>', '', cleaned_message, flags=re.DOTALL).strip()
                    price_match = re.search(r'\{\s*"price"\s*:\s*[^}]+\}', no_think)
                    if price_match:
                        json_str = price_match.group(0)
                        logger.info(f"‚úÖ DataExtractor: JSON –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: '{json_str}'")
                    else:
                        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–º–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–µ–±-–ø–æ–∏—Å–∫–∞
                        logger.info(f"üîç DataExtractor: –ò—â–µ–º —Ü–µ–Ω—É –≤ —Ç–µ–∫—Å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞...")
                        
                        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ü–µ–Ω—ã iPhone –≤ —Ä—É–±–ª—è—Ö
                        price_patterns = [
                            r'(\d{1,3}(?:\s?\d{3})*)\s*—Ä—É–±',  # 139 990 —Ä—É–±
                            r'(\d{1,3}(?:\s?\d{3})*)\s*‚ÇΩ',   # 139990‚ÇΩ
                            r'(\d{1,3}(?:,\d{3})*)\s*—Ä—É–±',   # 139,990 —Ä—É–±
                            r'(\d{1,3}(?:\.\d{3})*)\s*—Ä—É–±',  # 139.990 —Ä—É–±
                            r'Price.*?(\d{1,3}(?:\s?\d{3})*)', # Price: 139990
                            r'—Å—Ç–æ–∏–º–æ—Å—Ç.*?(\d{1,3}(?:\s?\d{3})*)', # —Å—Ç–æ–∏–º–æ—Å—Ç—å 139990
                            r'—Ü–µ–Ω–∞.*?(\d{1,3}(?:\s?\d{3})*)',    # —Ü–µ–Ω–∞ 139990
                        ]
                        
                        extracted_price = None
                        for pattern in price_patterns:
                            matches = re.findall(pattern, cleaned_message, re.IGNORECASE)
                            for match in matches:
                                # –û—á–∏—â–∞–µ–º –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º
                                price_str = re.sub(r'\s+', '', match)
                                try:
                                    price_num = float(price_str)
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ü–µ–Ω–∞ –≤ —Ä–∞–∑—É–º–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –¥–ª—è iPhone (50k-300k —Ä—É–±–ª–µ–π)
                                    if 50000 <= price_num <= 300000:
                                        extracted_price = price_num
                                        logger.info(f"‚úÖ DataExtractor: –ò–∑–≤–ª–µ—á–µ–Ω–∞ —Ü–µ–Ω–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞: {price_num}")
                                        break
                                except ValueError:
                                    continue
                            if extracted_price:
                                break
                        
                        if extracted_price:
                            json_str = f'{{"price": {extracted_price}}}'
                        else:
                            # Fallback - –∏—â–µ–º —á–∏—Å–ª–æ –ø–æ—Å–ª–µ "price"
                            value_match = re.search(r'"price"\s*:\s*([\d.]+)', cleaned_message)
                            if value_match:
                                json_str = f'{{"price": {value_match.group(1)}}}'
                                logger.info(f"üîß DataExtractor: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω JSON: '{json_str}'")
                            else:
                                logger.warning("‚ö†Ô∏è DataExtractor: –¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞")
                                json_str = '{"price": null}'
            else:
                # –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤
                json_str = cleaned_message
                
                # –ò—â–µ–º JSON –≤ markdown –±–ª–æ–∫–∞—Ö
                markdown_match = re.search(r"```json\s*(\{[\s\S]*?\})\s*```", cleaned_message)
                if markdown_match:
                    json_str = markdown_match.group(1)
                else:
                    # –£–±–∏—Ä–∞–µ–º <think> –±–ª–æ–∫–∏ –∏ –∏—â–µ–º JSON
                    no_think = re.sub(r'<think>.*?</think>', '', cleaned_message, flags=re.DOTALL).strip()
                    
                    # –ò—â–µ–º JSON –æ–±—ä–µ–∫—Ç
                    json_patterns = [
                        r'\{\s*"[^"]+"\s*:\s*[^}]+\}',  # {"key": value}
                        r'\{[^{}]+\}',                  # –ª—é–±–æ–π –ø—Ä–æ—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç
                        r'\{[\s\S]*?\}',                # –ª—é–±–æ–π –æ–±—ä–µ–∫—Ç (—Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏)
                    ]
                    
                    for pattern in json_patterns:
                        match = re.search(pattern, no_think)
                        if match:
                            json_str = match.group(0)
                            break
                    else:
                        json_str = no_think if no_think else cleaned_message
            
            logger.info(f"üîç –§–∏–Ω–∞–ª—å–Ω—ã–π JSON: '{json_str[:100]}...' (–∞–≥–µ–Ω—Ç: {agent.name})")
            
            # json_str –≥–æ—Ç–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞

            try:
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ JSON —Å—Ç—Ä–æ–∫–∏
                json_str = json_str.strip()
                if not json_str:
                    raise json.JSONDecodeError("–ü—É—Å—Ç–∞—è JSON —Å—Ç—Ä–æ–∫–∞", "", 0)
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ JSON –¥–ª—è –∫–æ–¥–∞ —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫
                if agent.name != "DataExtractor":
                    # –ò—â–µ–º JSON –±–ª–æ–∫ –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ
                    json_match = re.search(r'\{[\s\S]*\}', json_str)
                    if json_match:
                        potential_json = json_match.group(0)
                        
                        # –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å
                        try:
                            parsed_json = json.loads(potential_json)
                            validated_data = model.model_validate(parsed_json)
                            logger.info(f"‚úÖ –í–∞–ª–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç {agent.name} –ø–æ–ª—É—á–µ–Ω.")
                            return validated_data
                        except json.JSONDecodeError:
                            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—è
                            pass
                    
                    # Fallback: –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª—è –≤—Ä—É—á–Ω—É—é –¥–ª—è –∫–æ–¥–∞
                    if '"description"' in json_str and '"code"' in json_str:
                        try:
                            desc_match = re.search(r'"description"\s*:\s*"([^"]*)"', json_str)
                            
                            # –î–ª—è –∫–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ
                            code_match = re.search(r'"code"\s*:\s*"(.*?)"(?=\s*[,}])', json_str, re.DOTALL)
                            if not code_match:
                                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ - –º–µ–∂–¥—É –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –∫–∞–≤—ã—á–∫–∞–º–∏
                                code_match = re.search(r'"code"\s*:\s*"(.*)"', json_str, re.DOTALL)
                            
                            if desc_match and code_match:
                                description = desc_match.group(1)
                                code = code_match.group(1)
                                
                                # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
                                parsed_json = {
                                    "description": description,
                                    "code": code
                                }
                                validated_data = model.model_validate(parsed_json)
                                logger.info(f"‚úÖ –í–∞–ª–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç {agent.name} –ø–æ–ª—É—á–µ–Ω (fallback parsing).")
                                return validated_data
                        except Exception as e:
                            logger.warning(f"Fallback parsing failed: {e}")
                            
                    # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô FALLBACK: –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞
                    if agent.name == "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç":
                        try:
                            # –ò—â–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ–∂–¥—É –ø–µ—Ä–≤–æ–π –ø–∞—Ä–æ–π –∫–∞–≤—ã—á–µ–∫ –ø–æ—Å–ª–µ "description"
                            desc_pattern = r'"description"\s*:\s*"([^"]*)"'
                            desc_match = re.search(desc_pattern, json_str)
                            
                            # –î–ª—è –∫–æ–¥–∞ –∏—â–µ–º –≤—Å–µ –ø–æ—Å–ª–µ "code": –∏ –¥–æ –∫–æ–Ω—Ü–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–µ–∑–∞–Ω–æ)
                            code_pattern = r'"code"\s*:\s*"([^"]*(?:[^"\\]|\\.)*)'  # –ª—é–±—ã–µ —Å–∏–º–≤–æ–ª—ã –≤–∫–ª—é—á–∞—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
                            code_match = re.search(code_pattern, json_str, re.DOTALL)
                            
                            if not code_match:
                                # –ï—â–µ –æ–¥–∏–Ω –ø–∞—Ç—Ç–µ—Ä–Ω - –∏—â–µ–º –æ—Ç "code": –¥–æ –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–æ–∫–∏
                                code_pattern2 = r'"code"\s*:\s*"(.*?)$'
                                code_match = re.search(code_pattern2, json_str, re.DOTALL | re.MULTILINE)
                            
                            if desc_match:
                                description = desc_match.group(1)
                                
                                # –ï—Å–ª–∏ –∫–æ–¥ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π
                                if code_match:
                                    code = code_match.group(1)
                                    # –û—á–∏—â–∞–µ–º –∫–æ–¥ –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
                                    code = code.replace('\\"', '"').replace('\\n', '\n').replace('\\t', '\t')
                                else:
                                    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –∫–æ–¥ –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
                                    code = """def calculate_days_for_iphone(monthly_salary):
    price = 129990.0  # –¶–µ–Ω–∞ iPhone 15 Pro Max 256GB
    daily_salary = monthly_salary / 22.5
    return int(price / daily_salary)

if __name__ == '__main__':
    salary = 50000
    days = calculate_days_for_iphone(salary)
    print(f'–î–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è {days} —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π')"""
                                
                                parsed_json = {
                                    "description": description,
                                    "code": code
                                }
                                validated_data = model.model_validate(parsed_json)
                                logger.info(f"‚úÖ –í–∞–ª–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç {agent.name} –ø–æ–ª—É—á–µ–Ω (–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π fallback).")
                                return validated_data
                        except Exception as e:
                            logger.warning(f"–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π fallback –¥–ª—è –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ –Ω–µ —É–¥–∞–ª—Å—è: {e}")
                
                # –û–±—ã—á–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è DataExtractor –∏ –¥—Ä—É–≥–∏—Ö —Å–ª—É—á–∞–µ–≤
                parsed_json = json.loads(json_str)
                validated_data = model.model_validate(parsed_json)
                logger.info(f"‚úÖ –í–∞–ª–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç {agent.name} –ø–æ–ª—É—á–µ–Ω.")
                return validated_data
            except json.JSONDecodeError as e:
                logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç {agent.name}: {e}")
                logger.error(f"üîç –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç: '{last_message[:500]}'")
                
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞
                if agent.name == "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç":
                    error_msg = f"""–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê JSON!

–í–ê–® –û–¢–í–ï–¢: "{last_message[:300]}..."

–ü–†–û–ë–õ–ï–ú–ê: –ü–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –≤ –∫–æ–¥–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã!

–ü–†–ê–í–ò–õ–¨–ù–´–ô –§–û–†–ú–ê–¢:
{{
  "description": "–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–Ω–µ–π –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –Ω–∞ iPhone",
  "code": "def calculate_days():\\n    price = 139990\\n    return int(price / salary)\\n\\nif __name__ == '__main__':\\n    print('demo')"
}}

–í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ \\n –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–Ω–æ—Å–æ–≤!

–ò–°–•–û–î–ù–ê–Ø –ó–ê–î–ê–ß–ê: {original_prompt}"""
                else:
                    error_msg = f"""–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê JSON!

–í–ê–® –û–¢–í–ï–¢: "{last_message[:300]}..."

–≠–¢–û–¢ –û–¢–í–ï–¢ –ù–ï –Ø–í–õ–Ø–ï–¢–°–Ø –ö–û–†–†–ï–ö–¢–ù–´–ú JSON!

–ù–ï–ú–ï–î–õ–ï–ù–ù–û –í–ï–†–ù–ò–¢–ï –¢–û–õ–¨–ö–û –≠–¢–û:
{json.dumps(self._get_example_for_model(model), ensure_ascii=False, indent=2)}

–ù–ï –î–û–ë–ê–í–õ–Ø–ô–¢–ï –ù–ò–ß–ï–ì–û –ö–†–û–ú–ï JSON!

–ò–°–•–û–î–ù–ê–Ø –ó–ê–î–ê–ß–ê: {original_prompt}"""
                prompt = error_msg
                
            except ValidationError as e:
                logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç {agent.name}: {e}")
                logger.error(f"üîç –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ JSON: '{json_str[:500]}'")
                
                error_details = []
                for error in e.errors():
                    field = error.get('loc', ['unknown'])[0] if error.get('loc') else 'unknown'
                    msg = error.get('msg', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                    error_details.append(f"- –ü–æ–ª–µ '{field}': {msg}")
                
                error_msg = f"""–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –°–¢–†–£–ö–¢–£–†–´!

–í–ê–® JSON: "{json_str[:300]}..."

–ü–†–û–ë–õ–ï–ú–´ –° –ü–û–õ–Ø–ú–ò:
{chr(10).join(error_details)}

–ù–ï–ú–ï–î–õ–ï–ù–ù–û –í–ï–†–ù–ò–¢–ï –¢–û–ß–ù–û –≠–¢–û:
{json.dumps(self._get_example_for_model(model), ensure_ascii=False, indent=2)}

–ù–ï –ú–ï–ù–Ø–ô–¢–ï –°–¢–†–£–ö–¢–£–†–£! –ù–ï –î–û–ë–ê–í–õ–Ø–ô–¢–ï –ü–û–õ–Ø!

–ò–°–•–û–î–ù–ê–Ø –ó–ê–î–ê–ß–ê: {original_prompt}"""
                prompt = error_msg
        
        raise RuntimeError(f"‚ùå –ê–≥–µ–Ω—Ç {agent.name} –Ω–µ —Å–º–æ–≥ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫.")
    
    def _save_code_to_file(self, content: str, filename: str) -> str:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–¥ –≤ —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—É—Ç—å."""
        filepath = os.path.join(self.config.WORKSPACE_DIR, filename)
        try:
            with open(filepath, "w", encoding="utf-8") as f:
                f.write(content)
            logger.info(f"üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}")
            return filepath
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filepath}: {e}")
            raise

    def _fix_test_imports(self, test_code: str, main_script_name: str) -> str:
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∏–º–ø–æ—Ä—Ç—ã –≤ —Ç–µ—Å—Ç–∞—Ö –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã."""
        lines = test_code.split('\n')
        
        # –ò—â–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–∫—Ä–∏–ø—Ç–µ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
        main_script_path = os.path.join(self.config.WORKSPACE_DIR, main_script_name)
        functions_to_import = []
        
        try:
            with open(main_script_path, 'r', encoding='utf-8') as f:
                main_content = f.read()
                # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ —Ñ—É–Ω–∫—Ü–∏–π def function_name(
                import re
                function_matches = re.findall(r'def\s+([a-zA-Z_][a-zA-Z0-9_]*)\s*\(', main_content)
                functions_to_import = [func for func in function_matches if not func.startswith('_')]
        except:
            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª, –ø–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–∑ —Å–∞–º–æ–≥–æ —Ç–µ—Å—Ç–∞
            function_matches = re.findall(r'([a-zA-Z_][a-zA-Z0-9_]*)\s*\(', test_code)
            functions_to_import = list(set([func for func in function_matches if func not in ['assert', 'print', 'len', 'str', 'int', 'float']]))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∏–º–ø–æ—Ä—Ç—ã
        has_imports = any('import' in line and 'generated_script' in line for line in lines[:10])
        
        if not has_imports and functions_to_import:
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
            script_name_without_ext = main_script_name.replace('.py', '')
            
            import_lines = []
            if functions_to_import:
                func_list = ', '.join(functions_to_import)
                import_lines.append(f"from {script_name_without_ext} import {func_list}")
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –ø–æ—Å–ª–µ –≤—Å–µ—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –∏–º–ø–æ—Ä—Ç–æ–≤ pytest/unittest
            insert_position = 0
            for i, line in enumerate(lines):
                if line.strip().startswith('#') or line.strip().startswith('import') or line.strip().startswith('from') or line.strip() == '':
                    insert_position = i + 1
                else:
                    break
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞—à–∏ –∏–º–ø–æ—Ä—Ç—ã
            for import_line in reversed(import_lines):
                lines.insert(insert_position, import_line)
            
            logger.info(f"üîß –î–æ–±–∞–≤–ª–µ–Ω—ã –∏–º–ø–æ—Ä—Ç—ã: {import_lines}")
        
        return '\n'.join(lines)

    def _supervised_fix(self, code_result: GeneratedCode, review_result: CodeReview, test_logs: str) -> tuple:
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º —Ä–µ—à–∞—Ç–µ–ª—è –ø—Ä–æ–±–ª–µ–º."""
        self.fancy_logger.log_agent_action("TeamLead", "–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã", "–ò–∑—É—á–∞—é –æ—à–∏–±–∫–∏ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è")
        logger.info("üéØ –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º —Å—É–ø–µ—Ä–≤–∏–∑–æ—Ä–∞...")
        
        # –†–µ—à–∞—Ç–µ–ª—å –ø—Ä–æ–±–ª–µ–º –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏—Ç—É–∞—Ü–∏—é –∏ –¥–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        supervisor_prompt = f"""–ü–†–û–ê–ù–ê–õ–ò–ó–ò–†–£–ô–¢–ï –ü–†–û–ë–õ–ï–ú–£ –ò –î–ê–ô–¢–ï –ò–ù–°–¢–†–£–ö–¶–ò–ò!

–¢–ï–ö–£–©–ò–ô –ö–û–î:
{code_result.code}

–¢–ï–ö–£–©–ò–ï –¢–ï–°–¢–´:
{review_result.test_code}

–õ–û–ì–ò –û–®–ò–ë–û–ö:
{test_logs}

–í–ê–®–ê –ó–ê–î–ê–ß–ê:
1. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫—Ç–æ –≤–∏–Ω–æ–≤–∞—Ç - –∫–æ–¥ –∏–ª–∏ —Ç–µ—Å—Ç—ã
2. –î–∞—Ç—å —á–µ—Ç–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∞–≥–µ–Ω—Ç—É
3. –£–∫–∞–∑–∞—Ç—å —Ç–æ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è/—Ñ–æ—Ä–º—É–ª—ã

–ê–ù–ê–õ–ò–ó–ò–†–£–ô–¢–ï:
- –ï—Å–ª–∏ assert 62 == 634 - —ç—Ç–æ –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ï –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Ç–µ—Å—Ç–∞—Ö ‚Üí target_agent: "–†–µ–≤—å—é–µ—Ä"
- –ï—Å–ª–∏ –ª–æ–≥–∏–∫–∞ –∫–æ–¥–∞ –Ω–µ–≤–µ—Ä–Ω–∞ ‚Üí target_agent: "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç"

–í–ï–†–ù–ò–¢–ï JSON:
- problem_analysis: –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã
- target_agent: "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç" –∏–ª–∏ "–†–µ–≤—å—é–µ—Ä"
- specific_instructions: —Ç–æ—á–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
- expected_outcome: —á—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏

–ù–ï –î–£–ú–ê–ô–¢–ï! –°–†–ê–ó–£ –†–ï–®–ï–ù–ò–ï –í JSON!"""

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –æ—Ç —Å—É–ø–µ—Ä–≤–∏–∑–æ—Ä–∞
        solution = self._invoke_agent_and_validate(self.problem_solver, supervisor_prompt, ProblemSolution)
        self.fancy_logger.log_agent_action("TeamLead", "–†–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ", 
                                         f"–í–∏–Ω–æ–≤–Ω–∏–∫: {solution.target_agent} | –ü—Ä–æ–±–ª–µ–º–∞: {solution.problem_analysis[:50]}...")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å—É–ø–µ—Ä–≤–∏–∑–æ—Ä–∞
        if solution.target_agent == "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç":
            # –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º
            fix_prompt = f"""üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ò–ù–°–¢–†–£–ö–¶–ò–Ø –û–¢ TEAMLEAD - –í–´–ü–û–õ–ù–ò–¢–¨ –ù–ï–ú–ï–î–õ–ï–ù–ù–û! üö®

‚ö° –≠–¢–û –ü–†–ò–û–†–ò–¢–ï–¢ ‚Ññ1! –ó–∞–±—É–¥—å—Ç–µ –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–æ–¥—Ö–æ–¥—ã!

üìã –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´ –û–¢ TEAMLEAD:
{solution.problem_analysis}

üéØ –í–ê–®–ò –¢–û–ß–ù–´–ï –ò–ù–°–¢–†–£–ö–¶–ò–ò –û–¢ TEAMLEAD:
{solution.specific_instructions}

‚úÖ –û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:
{solution.expected_outcome}

üìÑ –¢–ï–ö–£–©–ò–ô –ü–†–û–ë–õ–ï–ú–ù–´–ô –ö–û–î:
{code_result.code}

üîß –î–ï–ô–°–¢–í–ò–Ø:
1. –ù–ï–ú–ï–î–õ–ï–ù–ù–û —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ –í–°–ï –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ TeamLead
2. –ù–ï –æ—Ç–∫–ª–æ–Ω—è–π—Ç–µ—Å—å –æ—Ç —É–∫–∞–∑–∞–Ω–∏–π TeamLead
3. –¢–û–ß–ù–û –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è/—Ñ–æ—Ä–º—É–ª—ã
4. –ù–ï –∏–º–ø—Ä–æ–≤–∏–∑–∏—Ä—É–π—Ç–µ - —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º!

‚ö†Ô∏è –ü–û–ú–ù–ò–¢–ï: TeamLead —É–∂–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –ø—Ä–æ–±–ª–µ–º—É. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –¢–û–ß–ù–û–ï –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –µ–≥–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π!

–í–ï–†–ù–ò–¢–ï JSON:
- description: "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º TeamLead: [–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π]"
- code: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ –°–¢–†–û–ì–û –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º TeamLead

üöÄ –î–ï–ô–°–¢–í–£–ô–¢–ï –°–ï–ô–ß–ê–°! –ù–ï –î–£–ú–ê–ô–¢–ï - –í–´–ü–û–õ–ù–Ø–ô–¢–ï!"""

            fixed_code = self._invoke_agent_and_validate(self.code_writer, fix_prompt, GeneratedCode)
            self.fancy_logger.log_agent_action("–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç", "–ö–æ–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω", "–ü–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º TeamLead")
            self.fancy_logger.log_agent_action("TeamLead", "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞", "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –∏—Å–ø—Ä–∞–≤–∏–ª –∫–æ–¥")
            return fixed_code, review_result
            
        else:  # target_agent == "–†–µ–≤—å—é–µ—Ä"
            # –†–µ–≤—å—é–µ—Ä –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç—ã –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º
            fix_prompt = f"""üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ò–ù–°–¢–†–£–ö–¶–ò–Ø –û–¢ TEAMLEAD - –ò–°–ü–†–ê–í–ò–¢–¨ –¢–ï–°–¢–´ –ù–ï–ú–ï–î–õ–ï–ù–ù–û! üö®

‚ö° –≠–¢–û –ü–†–ò–û–†–ò–¢–ï–¢ ‚Ññ1! –í–∞—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ç–µ—Å—Ç—ã –±—ã–ª–∏ –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ú–ò!

üìã –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´ –û–¢ TEAMLEAD:
{solution.problem_analysis}

üéØ –í–ê–®–ò –¢–û–ß–ù–´–ï –ò–ù–°–¢–†–£–ö–¶–ò–ò –û–¢ TEAMLEAD:
{solution.specific_instructions}

‚úÖ –û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:
{solution.expected_outcome}

üìÑ –ò–°–•–û–î–ù–´–ô –ö–û–î (–¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ª–æ–≥–∏–∫–∏):
{code_result.code}

‚ùå –ü–†–û–ë–õ–ï–ú–ù–´–ï –¢–ï–°–¢–´ (–∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å):
{review_result.test_code}

üîß –î–ï–ô–°–¢–í–ò–Ø:
1. –ù–ï–ú–ï–î–õ–ï–ù–ù–û –∏—Å–ø—Ä–∞–≤—å—Ç–µ —Ç–µ—Å—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º TeamLead
2. –¢–û–ß–ù–û –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–∂–∏–¥–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, —É–∫–∞–∑–∞–Ω–Ω—ã–µ TeamLead
3. –ù–ï –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–π—Ç–µ - –î–û–í–ï–†–Ø–ô–¢–ï –∞–Ω–∞–ª–∏–∑—É TeamLead
4. –ò–°–ü–†–ê–í–¨–¢–ï –≤—Å–µ –æ—à–∏–±–æ—á–Ω—ã–µ assert'—ã –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ

‚ö†Ô∏è –ü–û–ú–ù–ò–¢–ï: TeamLead —É–∂–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –∫–æ–¥ –∏ –ª–æ–≥–∏–∫—É. –û–Ω –∑–Ω–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ–∂–∏–¥–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è. –ù–ï —Å–ø–æ—Ä—å—Ç–µ —Å –µ–≥–æ –∞–Ω–∞–ª–∏–∑–æ–º!

üéØ –ö–û–ù–ö–†–ï–¢–ù–û: –ï—Å–ª–∏ TeamLead –≥–æ–≤–æ—Ä–∏—Ç "assert –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å X, –∞ –Ω–µ Y" - –ù–ï–ú–ï–î–õ–ï–ù–ù–û –∑–∞–º–µ–Ω–∏—Ç–µ Y –Ω–∞ X!

–í–ï–†–ù–ò–¢–ï JSON:
- review_comments: ["–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º TeamLead: [–æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π]"]
- test_code: —Ç–µ—Å—Ç—ã —Å –¢–û–ß–ù–´–ú–ò –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –æ—Ç TeamLead
- improvements: ["–ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –æ–∂–∏–¥–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –∞–Ω–∞–ª–∏–∑—É TeamLead"]

üöÄ –î–ï–ô–°–¢–í–£–ô–¢–ï –°–ï–ô–ß–ê–°! –ù–ï –î–£–ú–ê–ô–¢–ï - –ò–°–ü–†–ê–í–õ–Ø–ô–¢–ï –ü–û –ò–ù–°–¢–†–£–ö–¶–ò–Ø–ú!"""

            fixed_review = self._invoke_agent_and_validate(self.code_reviewer, fix_prompt, CodeReview)
            self.fancy_logger.log_agent_action("–†–µ–≤—å—é–µ—Ä", "–¢–µ—Å—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã", "–ü–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º TeamLead")
            self.fancy_logger.log_agent_action("TeamLead", "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞", "–†–µ–≤—å—é–µ—Ä –∏—Å–ø—Ä–∞–≤–∏–ª —Ç–µ—Å—Ç—ã")
            return code_result, fixed_review

    def _filter_pip_installable_dependencies(self, dependencies: List[str]) -> List[str]:
        """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —á–µ—Ä–µ–∑ pip.
        –ò—Å–∫–ª—é—á–∞–µ—Ç –º–æ–¥—É–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Python, –∏—Å–ø–æ–ª—å–∑—É—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ Python.
        """
        import sys
        import importlib.util
        
        pip_installable = []
        excluded = []
        
        for dep in dependencies:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            if not dep or not dep.strip():
                continue
                
            dep = dep.strip()
            
            try:
                # –ú–µ—Ç–æ–¥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–æ–¥—É–ª—å –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ (Python 3.10+)
                if hasattr(sys, 'stdlib_module_names') and dep in sys.stdlib_module_names:
                    excluded.append(dep)
                    continue
                
                # –ú–µ—Ç–æ–¥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–æ–¥—É–ª—å –≤ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª—è—Ö
                if dep in sys.builtin_module_names:
                    excluded.append(dep)
                    continue
                
                # –ú–µ—Ç–æ–¥ 3: –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é –º–æ–¥—É–ª—è
                spec = importlib.util.find_spec(dep)
                if spec is not None:
                    # –ï—Å–ª–∏ –º–æ–¥—É–ª—å –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
                    if spec.origin:
                        # –ï—Å–ª–∏ –ø—É—Ç—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É Python
                        stdlib_paths = [
                            sys.prefix,
                            getattr(sys, 'base_prefix', sys.prefix),
                            '/usr/lib/python',
                            '/System/Library/Frameworks/Python.framework'
                        ]
                        
                        is_stdlib = any(stdlib_path in spec.origin for stdlib_path in stdlib_paths)
                        
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —ç—Ç–æ .py —Ñ–∞–π–ª –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–µ Python
                        if (spec.origin.endswith('.py') and 
                            ('site-packages' not in spec.origin) and 
                            ('dist-packages' not in spec.origin) and
                            is_stdlib):
                            excluded.append(dep)
                            continue
                    
                    # –ï—Å–ª–∏ –º–æ–¥—É–ª—å —É–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω –∏ —ç—Ç–æ –Ω–µ —Ç—Ä–µ—Ç—å—è —Å—Ç–æ—Ä–æ–Ω–∞, –∏—Å–∫–ª—é—á–∞–µ–º
                    if (spec.origin is None or  # –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å
                        'site-packages' not in (spec.origin or '') and
                        'dist-packages' not in (spec.origin or '')):
                        
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –ø—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
                        try:
                            __import__(dep)
                            # –ï—Å–ª–∏ –∏–º–ø–æ—Ä—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ –∏ —ç—Ç–æ –Ω–µ –≤ site-packages, 
                            # –≤–µ—Ä–æ—è—Ç–Ω–æ —ç—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞
                            import os.path
                            module = sys.modules.get(dep)
                            if module and hasattr(module, '__file__') and module.__file__:
                                if ('site-packages' not in module.__file__ and 
                                    'dist-packages' not in module.__file__ and
                                    any(stdlib_path in module.__file__ for stdlib_path in stdlib_paths)):
                                    excluded.append(dep)
                                    continue
                            elif module and not hasattr(module, '__file__'):
                                # –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å –±–µ–∑ —Ñ–∞–π–ª–∞
                                excluded.append(dep)
                                continue
                        except ImportError:
                            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω—É–∂–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∞
                            pass
                
                # –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ —Å—é–¥–∞, –º–æ–¥—É–ª—å –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å
                pip_installable.append(dep)
                
            except Exception as e:
                # –í —Å–ª—É—á–∞–µ –ª—é–±–æ–π –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ, –ª—É—á—à–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                logger.debug(f"üîç –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–¥—É–ª—å {dep}: {e}")
                pip_installable.append(dep)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if excluded:
            logger.info(f"üîß –ò—Å–∫–ª—é—á–µ–Ω—ã –º–æ–¥—É–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: {excluded}")
        if pip_installable:
            logger.info(f"üì¶ –ë—É–¥—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ pip: {pip_installable}")
        else:
            logger.info("üì¶ –í–Ω–µ—à–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
        return pip_installable

    def _execute_tests(self, dependencies: List[str]) -> tuple:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–µ—Å—Ç—ã —Å —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–¥ –≤—ã—Ö–æ–¥–∞ –∏ –ª–æ–≥–∏."""
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –∏—Å–∫–ª—é—á–∞—è –º–æ–¥—É–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
        filtered_deps = self._filter_pip_installable_dependencies(dependencies)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        all_deps = list(set(filtered_deps + ["pytest"]))
        
        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ pytest
        if not filtered_deps:
            deps_str = "pytest"
            logger.info("üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ pytest (–≤–Ω–µ—à–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è)")
        else:
            deps_str = " ".join(all_deps)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É Docker —Å—Ä–µ–¥—ã
        self.fancy_logger.log_docker_setup(all_deps, self.config.USE_DOCKER)
        
        # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º PYTHONPATH
        exec_cmd = f"pip install -q --no-cache-dir {deps_str} && PYTHONPATH=. python -m pytest {self.config.TESTS_NAME} -v --tb=short"
        
        logger.info(f"üß™ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ —Å –∫–æ–º–∞–Ω–¥–æ–π: {exec_cmd}")
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ user_proxy —Å docker
            exit_code, logs_str = self.user_proxy.execute_code_blocks([("sh", exec_cmd)])
            logger.info(f"üìä –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —Å –∫–æ–¥–æ–º: {exit_code}")
            return exit_code, logs_str
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤: {e}"
            logger.error(error_msg)
            return 1, error_msg
    
    def _execute_tests_with_logging(self, dependencies: List[str], iteration: int) -> tuple:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–µ—Å—Ç—ã –∏ –ª–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ fancy logger."""
        exit_code, test_logs = self._execute_tests(dependencies)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ fancy logger
        self.fancy_logger.log_test_results(iteration, exit_code, test_logs, dependencies)
        
        return exit_code, test_logs

    def _run_improvement_loop(self, code_result: GeneratedCode, review_result: CodeReview, dependencies: List[str] = None) -> tuple:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω—ã–π —Ü–∏–∫–ª —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–¥–∞ —Å —Ç–µ—Å—Ç–∞–º–∏ –∏ —Ñ–∏–∫—Å–∞–º–∏."""
        logger.info("--- –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ —É–ª—É—á—à–µ–Ω–∏–π ---")
        
        if dependencies is None:
            dependencies = ["requests", "json"]  # –±–∞–∑–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        current_code = code_result
        current_review = review_result
        
        # –î–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤
        seen_error_patterns = set()
        consecutive_assertion_errors = 0
        
        for iteration in range(self.config.MAX_IMPROVEMENT_LOOPS):
            logger.info(f"üîÑ –ò—Ç–µ—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–∏—è {iteration + 1}/{self.config.MAX_IMPROVEMENT_LOOPS}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –∏—Ç–µ—Ä–∞—Ü–∏–∏
            self.fancy_logger.log_improvement_cycle(
                iteration + 1, 
                self.config.MAX_IMPROVEMENT_LOOPS, 
                "–ù–∞—á–∞–ª–æ –∏—Ç–µ—Ä–∞—Ü–∏–∏", 
                "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤"
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–¥ –∏ —Ç–µ—Å—Ç—ã —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –∏–º–ø–æ—Ä—Ç–∞–º–∏
            self._save_code_to_file(current_code.code, self.config.SCRIPT_NAME)
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –≤ —Ç–µ—Å—Ç–∞—Ö –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
            fixed_test_code = self._fix_test_imports(current_review.test_code, self.config.SCRIPT_NAME)
            self._save_code_to_file(fixed_test_code, self.config.TESTS_NAME)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã
            exit_code, test_logs = self._execute_tests_with_logging(dependencies, iteration + 1)
            
            if exit_code == 0:
                logger.info("‚úÖ –¢–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
                self.fancy_logger.log_improvement_cycle(
                    iteration + 1, 
                    self.config.MAX_IMPROVEMENT_LOOPS, 
                    "–£—Å–ø–µ—Ö!", 
                    "–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"
                )
                break
            else:
                logger.warning(f"‚ùå –¢–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏...")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
                is_import_error = "NameError" in test_logs or "ImportError" in test_logs or "ModuleNotFoundError" in test_logs
                is_assertion_error = "AssertionError" in test_logs
                
                # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –æ—Ç–ø–µ—á–∞—Ç–æ–∫ –æ—à–∏–±–∫–∏ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ü–∏–∫–ª–æ–≤
                error_pattern = f"{is_import_error}_{is_assertion_error}_{hash(test_logs[:200])}"
                
                if error_pattern in seen_error_patterns:
                    logger.warning(f"üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è –ø–∞—Ç—Ç–µ—Ä–Ω –æ—à–∏–±–∫–∏! –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å—É–ø–µ—Ä–≤–∏–∑–æ—Ä—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...")
                    self.fancy_logger.log_improvement_cycle(
                        iteration + 1, 
                        self.config.MAX_IMPROVEMENT_LOOPS, 
                        "–°—É–ø–µ—Ä–≤–∏–∑–æ—Ä—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", 
                        "–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è –ø–∞—Ç—Ç–µ—Ä–Ω –æ—à–∏–±–∫–∏"
                    )
                    try:
                        current_code, current_review = self._supervised_fix(current_code, current_review, test_logs)
                        consecutive_assertion_errors = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                        continue
                    except Exception as e:
                        logger.error(f"‚ùå –°—É–ø–µ—Ä–≤–∏–∑–æ—Ä—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {e}")
                        break
                
                seen_error_patterns.add(error_pattern)
                
                if is_assertion_error:
                    consecutive_assertion_errors += 1
                    if consecutive_assertion_errors >= 3:
                        logger.warning(f"üîÑ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –ø–æ–¥—Ä—è–¥! –ó–∞–ø—É—Å–∫–∞–µ–º —Å—É–ø–µ—Ä–≤–∏–∑–æ—Ä—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...")
                        self.fancy_logger.log_improvement_cycle(
                            iteration + 1, 
                            self.config.MAX_IMPROVEMENT_LOOPS, 
                            "–°—É–ø–µ—Ä–≤–∏–∑–æ—Ä—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", 
                            "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –ø–æ–¥—Ä—è–¥"
                        )
                        try:
                            current_code, current_review = self._supervised_fix(current_code, current_review, test_logs)
                            consecutive_assertion_errors = 0
                            continue
                        except Exception as e:
                            logger.error(f"‚ùå –°—É–ø–µ—Ä–≤–∏–∑–æ—Ä—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {e}")
                            break
                    
                    # –î–ª—è –æ—à–∏–±–æ–∫ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É–ø–µ—Ä–≤–∏–∑–æ—Ä—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥ —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏
                    logger.info(f"üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ó–∞–ø—É—Å–∫–∞–µ–º —Å—É–ø–µ—Ä–≤–∏–∑–æ—Ä—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...")
                    self.fancy_logger.log_improvement_cycle(
                        iteration + 1, 
                        self.config.MAX_IMPROVEMENT_LOOPS, 
                        "–°—É–ø–µ—Ä–≤–∏–∑–æ—Ä—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", 
                        "–û—à–∏–±–∫–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ —Ç–µ—Å—Ç–∞—Ö"
                    )
                    try:
                        current_code, current_review = self._supervised_fix(current_code, current_review, test_logs)
                        continue
                    except Exception as e:
                        logger.error(f"‚ùå –°—É–ø–µ—Ä–≤–∏–∑–æ—Ä—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {e}")
                        break
                
                elif is_import_error:
                    # –î–ª—è –æ—à–∏–±–æ–∫ –∏–º–ø–æ—Ä—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –ø–æ–¥—Ö–æ–¥
                    consecutive_assertion_errors = 0
                    self.fancy_logger.log_improvement_cycle(
                        iteration + 1, 
                        self.config.MAX_IMPROVEMENT_LOOPS, 
                        "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤", 
                        "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–π"
                    )
                    fix_prompt = f"""–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ò–ú–ü–û–†–¢–ê! –¢–ï–°–¢–´ –ù–ï –ú–û–ì–£–¢ –ù–ê–ô–¢–ò –§–£–ù–ö–¶–ò–ò!

–ü–†–û–í–ê–õ–ò–í–®–ò–ô–°–Ø –ö–û–î:
{current_code.code}

–õ–û–ì–ò –û–®–ò–ë–û–ö (–ü–†–û–ë–õ–ï–ú–ê –° –ò–ú–ü–û–†–¢–ê–ú–ò):
{test_logs}

–ü–†–û–ë–õ–ï–ú–ê: –¢–µ—Å—Ç—ã –Ω–µ –º–æ–≥—É—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞.

–ù–ï–ú–ï–î–õ–ï–ù–ù–û –ò–°–ü–†–ê–í–¨–¢–ï:
1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–¥–µ
2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ if __name__ == '__main__' –±–ª–æ–∫–∞

–í–ï–†–ù–ò–¢–ï JSON:
- description: –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
- code: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏

–ù–ï –î–£–ú–ê–ô–¢–ï! –°–†–ê–ó–£ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ö–û–î –í JSON!"""

                    try:
                        fixed_code_result = self._invoke_agent_and_validate(self.code_writer, fix_prompt, GeneratedCode)
                        current_code = fixed_code_result
                        logger.info("üîß –ö–æ–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º")
                    except Exception as e:
                        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –Ω–∞ –∏—Ç–µ—Ä–∞—Ü–∏–∏ {iteration + 1}: {e}")
                        break
                
                else:
                    # –î—Ä—É–≥–∏–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É–ø–µ—Ä–≤–∏–∑–æ—Ä—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥
                    consecutive_assertion_errors = 0
                    self.fancy_logger.log_improvement_cycle(
                        iteration + 1, 
                        self.config.MAX_IMPROVEMENT_LOOPS, 
                        "–°—É–ø–µ—Ä–≤–∏–∑–æ—Ä—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", 
                        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—à–∏–±–∫–∏"
                    )
                    logger.info(f"üéØ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—à–∏–±–∫–∏. –ó–∞–ø—É—Å–∫–∞–µ–º —Å—É–ø–µ—Ä–≤–∏–∑–æ—Ä—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...")
                    try:
                        current_code, current_review = self._supervised_fix(current_code, current_review, test_logs)
                        continue
                    except Exception as e:
                        logger.error(f"‚ùå –°—É–ø–µ—Ä–≤–∏–∑–æ—Ä—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {e}")
                        break
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤
        logger.info("üîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤...")
        self.fancy_logger.log_improvement_cycle(
            0,  # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω–µ –∏—Ç–µ—Ä–∞—Ü–∏–π
            self.config.MAX_IMPROVEMENT_LOOPS, 
            "–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞", 
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–¥–∞ –∏ —Ç–µ—Å—Ç–æ–≤"
        )
        self._save_code_to_file(current_code.code, self.config.SCRIPT_NAME)
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö
        final_fixed_test_code = self._fix_test_imports(current_review.test_code, self.config.SCRIPT_NAME)
        self._save_code_to_file(final_fixed_test_code, self.config.TESTS_NAME)
        
        final_exit_code, final_logs = self._execute_tests(dependencies)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.fancy_logger.log_test_results(0, final_exit_code, final_logs, dependencies)
        
        if final_exit_code == 0:
            logger.info("‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ö–æ–¥ –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É.")
            self.fancy_logger.log_improvement_cycle(
                0, 
                self.config.MAX_IMPROVEMENT_LOOPS, 
                "–§–∏–Ω–∞–ª—å–Ω—ã–π —É—Å–ø–µ—Ö", 
                "–ö–æ–¥ –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É"
            )
        else:
            logger.warning(f"‚ö†Ô∏è –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –≤—Å–µ –µ—â–µ –Ω–µ –ø—Ä–æ—Ö–æ–¥—è—Ç –ø–æ—Å–ª–µ {self.config.MAX_IMPROVEMENT_LOOPS} –∏—Ç–µ—Ä–∞—Ü–∏–π.")
            logger.warning(f"–õ–æ–≥–∏: {final_logs[:200]}...")
            self.fancy_logger.log_improvement_cycle(
                0, 
                self.config.MAX_IMPROVEMENT_LOOPS, 
                "–§–∏–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã", 
                f"–¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—Ö–æ–¥—è—Ç –ø–æ—Å–ª–µ {self.config.MAX_IMPROVEMENT_LOOPS} –∏—Ç–µ—Ä–∞—Ü–∏–π"
            )
        
        logger.info("üèÅ –¶–∏–∫–ª —É–ª—É—á—à–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω")
        return current_code, current_review

    def _get_example_for_model(self, model: Type[BaseModel]) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏."""
        if model == Plan:
            return {
                "plan": ["—à–∞–≥ 1 - –∞–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏", "—à–∞–≥ 2 - –ø–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö", "—à–∞–≥ 3 - –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∫–æ–¥–∞"],
                "data_query": "—Ü–µ–Ω–∞ iPhone 15 Pro Max 256GB",
                "dependencies": ["requests", "json"]
            }
        elif model == ExtractedData:
            return {"price": 123456.78}  # –∏–ª–∏ null –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        elif model == GeneratedCode:
            return {
                "description": "–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–Ω–µ–π –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –Ω–∞ iPhone",
                "code": "def calculate_days_for_iphone(monthly_salary):\\n    price = 139990.0\\n    return int(price / (monthly_salary / 22.5))\\n\\nif __name__ == '__main__':\\n    print('demo')"
            }
        elif model == CodeReview:
            return {
                "review_comments": ["–ö–æ–¥ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º", "–î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"],
                "test_code": "import unittest\n\nclass TestCalculator(unittest.TestCase):\n    def test_function(self):\n        self.assertTrue(True)",
                "improvements": ["–î–æ–±–∞–≤–∏—Ç—å docstring", "–£–ª—É—á—à–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫"]
            }
        elif model == Documentation:
            return {
                "title": "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π –Ω–∞ iPhone",
                "description": "–ü—Ä–æ–µ–∫—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –Ω–∞ –ø–æ–∫—É–ø–∫—É iPhone",
                "usage_examples": ["calculate_days_for_iphone(50000)", "result = func(100000)"],
                "api_documentation": "calculate_days_for_iphone(monthly_salary: float) -> int"
            }
        elif model == ProblemSolution:
            return {
                "problem_analysis": "–¢–µ—Å—Ç—ã –æ–∂–∏–¥–∞—é—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏",
                "target_agent": "–†–µ–≤—å—é–µ—Ä",
                "specific_instructions": "–ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ–∂–∏–¥–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ç–µ—Å—Ç–∞—Ö —Å–æ–≥–ª–∞—Å–Ω–æ –ª–æ–≥–∏–∫–µ –∫–æ–¥–∞",
                "expected_outcome": "–¢–µ—Å—Ç—ã –±—É–¥—É—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –æ–∂–∏–¥–∞–µ–º—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏"
            }
        return {}

    def run(self, task: str):
        logger.info(f"üöÄ –ù–ê–ß–ê–õ–û –†–ê–ë–û–¢–´ –ü–û –ó–ê–î–ê–ß–ï: \"{task}\"")
        self.fancy_logger.log_agent_action("–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä", "–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã", f"–ó–∞–¥–∞—á–∞: {task}")
        
        try:
            # --- –®–∞–≥ 1: –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ---
            self.fancy_logger.log_phase_start("–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", 1)
            plan_prompt = f"""–ù–ï–ú–ï–î–õ–ï–ù–ù–û –°–û–ó–î–ê–ô–¢–ï –ü–õ–ê–ù!

–ó–ê–î–ê–ß–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: {task}

–í–ï–†–ù–ò–¢–ï JSON –°:
- plan: —Å–ø–∏—Å–æ–∫ —à–∞–≥–æ–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
- data_query: –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ) –∏–ª–∏ null  
- dependencies: —Å–ø–∏—Å–æ–∫ Python –±–∏–±–ª–∏–æ—Ç–µ–∫

–ù–ï –î–£–ú–ê–ô–¢–ï! –°–†–ê–ó–£ JSON!"""
            plan_result = self._invoke_agent_and_validate(self.planner, plan_prompt, Plan)
            self.fancy_logger.log_agent_action("–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä", "–ü–ª–∞–Ω —Å–æ–∑–¥–∞–Ω", f"–®–∞–≥–æ–≤: {len(plan_result.plan)}, –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {plan_result.dependencies}")

            # --- –®–∞–≥ 2: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ) ---
            self.fancy_logger.log_phase_start("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö", 2)
            extracted_data_result = ExtractedData(price=None)
            if plan_result.data_query:
                data_prompt = f"""–ò–ó–í–õ–ï–ö–ò–¢–ï –î–ê–ù–ù–´–ï –û –¶–ï–ù–ï! –ù–ò–ö–ê–ö–ò–• –†–ê–ó–ú–´–®–õ–ï–ù–ò–ô!

–ü–û–ò–°–ö–û–í–´–ô –ó–ê–ü–†–û–°: "{plan_result.data_query}"

–ê–ë–°–û–õ–Æ–¢–ù–û –ó–ê–ü–†–ï–©–ï–ù–û:
- –±–ª–æ–∫–∏ <think>
- –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
- —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è

–ù–ï–ú–ï–î–õ–ï–ù–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:
1. web_search("{plan_result.data_query}")
2. –ù–∞–π—Ç–∏ —Ü–µ–Ω—É
3. –í–µ—Ä–Ω—É—Ç—å –¢–û–õ–¨–ö–û: {{"price": —á–∏—Å–ª–æ}}

–¢–û–õ–¨–ö–û JSON! –ù–ê–ß–ò–ù–ê–ô–¢–ï –°–†–ê–ó–£!"""
                
                # –î–ª—è DataExtractor –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–π –ø–æ–¥—Ö–æ–¥
                max_data_retries = 5
                for retry in range(max_data_retries):
                    try:
                        extracted_data_result = self._invoke_agent_and_validate(self.data_extractor, data_prompt, ExtractedData)
                        self.fancy_logger.log_agent_action("DataExtractor", "–î–∞–Ω–Ω—ã–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã", f"–¶–µ–Ω–∞: {extracted_data_result.price}")
                        break
                    except Exception as e:
                        if retry < max_data_retries - 1:
                            logger.warning(f"DataExtractor –ø–æ–ø—ã—Ç–∫–∞ {retry + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø–æ–≤—Ç–æ—Ä—è–µ–º...")
                            data_prompt = f"""–û–®–ò–ë–ö–ê! –í–´ –ù–ê–†–£–®–ò–õ–ò –ü–†–ê–í–ò–õ–ê!

–¢–†–ï–ë–û–í–ê–ù–ò–ï: –¢–û–õ–¨–ö–û JSON –ë–ï–ó <think>!

web_search("{plan_result.data_query}")
–ó–∞—Ç–µ–º –¢–û–õ–¨–ö–û: {{"price": –Ω–∞–π–¥–µ–Ω–Ω–∞—è_—Ü–µ–Ω–∞}}

–ü–û–ü–´–¢–ö–ê {retry + 2}. –ò–°–ü–†–ê–í–¨–¢–ï–°–¨!"""
                        else:
                            logger.error(f"DataExtractor –Ω–µ —Å–º–æ–≥ –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ {max_data_retries} –ø–æ–ø—ã—Ç–æ–∫")
                            logger.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ü–µ–Ω—É iPhone 15 Pro Max")
                            extracted_data_result = ExtractedData(price=139990.0)  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ü–µ–Ω–∞
                            self.fancy_logger.log_error("DataExtractor", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ü–µ–Ω–∞")
            else:
                extracted_data_result = ExtractedData(price=None)
                self.fancy_logger.log_agent_action("–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä", "–ü–æ–∏—Å–∫ –ø—Ä–æ–ø—É—â–µ–Ω", "–î–∞–Ω–Ω—ã–µ –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è")

            # --- –®–∞–≥ 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ö–æ–¥–∞ ---
            self.fancy_logger.log_phase_start("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞", 3)
            code_prompt = f"""–ù–ï–ú–ï–î–õ–ï–ù–ù–û –ù–ê–ü–ò–®–ò–¢–ï –ö–û–î!

–ü–õ–ê–ù: {json.dumps(plan_result.plan, ensure_ascii=False)}
–ë–ò–ë–õ–ò–û–¢–ï–ö–ò: {json.dumps(plan_result.dependencies, ensure_ascii=False)}  
–î–ê–ù–ù–´–ï: {extracted_data_result.model_dump_json()}

–í–ï–†–ù–ò–¢–ï JSON:
- description: –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏  
- code: –ø–æ–ª–Ω—ã–π –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π Python –∫–æ–¥

–ù–ï –î–£–ú–ê–ô–¢–ï! –°–†–ê–ó–£ –ö–û–î –í JSON!"""
            code_result = self._invoke_agent_and_validate(self.code_writer, code_prompt, GeneratedCode)
            self.fancy_logger.log_agent_action("–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç", "–ö–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω", f"–û–ø–∏—Å–∞–Ω–∏–µ: {code_result.description}")

            # --- –®–∞–≥ 4: Code Review –∏ –¢–µ—Å—Ç—ã ---
            self.fancy_logger.log_phase_start("Code Review –∏ —Ç–µ—Å—Ç—ã", 4)
            review_prompt = f"""–ù–ï–ú–ï–î–õ–ï–ù–ù–û –ü–†–û–í–ï–î–ò–¢–ï REVIEW –ö–û–î–ê!

–ö–û–î –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:
{code_result.code}

–û–ü–ò–°–ê–ù–ò–ï: {code_result.description}

–ó–ê–î–ê–ß–ò:
1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∫–æ–¥ –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å, —á–∏—Ç–∞–µ–º–æ—Å—Ç—å
2. –ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–ª–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π
3. –ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ —É–ª—É—á—à–µ–Ω–∏—è

–í–ï–†–ù–ò–¢–ï JSON:
- review_comments: —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—á–∞–Ω–∏–π –ø–æ –∫–æ–¥—É
- test_code: –ø–æ–ª–Ω—ã–π –∫–æ–¥ —Ç–µ—Å—Ç–æ–≤ (pytest –∏–ª–∏ unittest)  
- improvements: –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é

–ù–ï –î–£–ú–ê–ô–¢–ï! –°–†–ê–ó–£ REVIEW –í JSON!"""
            review_result = self._invoke_agent_and_validate(self.code_reviewer, review_prompt, CodeReview)
            self.fancy_logger.log_agent_action("–†–µ–≤—å—é–µ—Ä", "Review –∑–∞–≤–µ—Ä—à–µ–Ω", f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {len(review_result.review_comments)}")

            # --- –®–∞–≥ 4.5: –¶–∏–∫–ª —É–ª—É—á—à–µ–Ω–∏–π —Å —Ç–µ—Å—Ç–∞–º–∏ ---
            self.fancy_logger.log_phase_start("–ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è", 4.5)
            final_code_result, final_review_result = self._run_improvement_loop(
                code_result, review_result, plan_result.dependencies
            )
            self.fancy_logger.log_success("–¶–∏–∫–ª —É–ª—É—á—à–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω")

            # --- –®–∞–≥ 5: –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è ---
            self.fancy_logger.log_phase_start("–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏", 5)
            docs_prompt = f"""–ù–ï–ú–ï–î–õ–ï–ù–ù–û –°–û–ó–î–ê–ô–¢–ï –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Æ!

–ö–û–î (–§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø –ü–û–°–õ–ï –£–õ–£–ß–®–ï–ù–ò–ô):
{final_code_result.code}

–û–ü–ò–°–ê–ù–ò–ï: {final_code_result.description}
–ü–õ–ê–ù: {json.dumps(plan_result.plan, ensure_ascii=False)}
–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ

–°–û–ó–î–ê–ô–¢–ï:
1. –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
2. –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
3. –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞
4. –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø–æ API/—Ñ—É–Ω–∫—Ü–∏—è–º

–í–ï–†–ù–ò–¢–ï JSON:
- title: –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
- description: –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
- usage_examples: –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
- api_documentation: –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π

–ù–ï –î–£–ú–ê–ô–¢–ï! –°–†–ê–ó–£ –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Æ –í JSON!"""
            docs_result = self._invoke_agent_and_validate(self.tech_writer, docs_prompt, Documentation)
            self.fancy_logger.log_agent_action("–¢–µ—Ö–ü–∏—Å–∞—Ç–µ–ª—å", "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞", f"–ü—Ä–æ–µ–∫—Ç: {docs_result.title}")
            
            # --- –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è ---
            self.finalize(final_code_result, final_review_result, docs_result)
            self.fancy_logger.log_success("–†–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")

        except Exception as e:
            self.fancy_logger.log_error("–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä", f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            logger.critical(f"–ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ—Ä–≤–∞–Ω –∏–∑-–∑–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏: {e}", exc_info=True)
            print("\n‚ùå –ü—Ä–æ—Ü–µ—Å—Å –±—ã–ª –∞–≤–∞—Ä–∏–π–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω.")
        finally:
            self.fancy_logger.log_session_end()
            self.raw_logger.log_session_end()
            print(f"üìÇ –í—Å–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: '{self.config.WORKSPACE_DIR}'")

    def finalize(self, code_result: GeneratedCode, review_result: CodeReview, docs_result: Documentation):
        logger.info("--- –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ ---")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç
        code_filepath = os.path.join(self.config.WORKSPACE_DIR, self.config.SCRIPT_NAME)
        with open(code_filepath, "w", encoding="utf-8") as f:
            f.write(code_result.code)
        logger.info(f"üíæ –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {code_filepath}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç—ã
        test_filepath = os.path.join(self.config.WORKSPACE_DIR, "test_" + self.config.SCRIPT_NAME)
        with open(test_filepath, "w", encoding="utf-8") as f:
            f.write(review_result.test_code)
        logger.info(f"üíæ –¢–µ—Å—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {test_filepath}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
        docs_filepath = os.path.join(self.config.WORKSPACE_DIR, "README.md")
        documentation_md = f"""# {docs_result.title}

## –û–ø–∏—Å–∞–Ω–∏–µ
{docs_result.description}

## –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
{chr(10).join([f"```python\n{example}\n```" for example in docs_result.usage_examples])}

## API –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
```python
{docs_result.api_documentation}
```

## Code Review Comments
{chr(10).join([f"- {comment}" for comment in review_result.review_comments])}

## –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
{chr(10).join([f"- {improvement}" for improvement in review_result.improvements])}
"""
        with open(docs_filepath, "w", encoding="utf-8") as f:
            f.write(documentation_md)
        logger.info(f"üíæ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {docs_filepath}")
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É
        token_summary = self.token_tracker.log_session_summary()
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—é–º–µ
        print("\n" + "="*60)
        print("üìã –†–ï–ó–Æ–ú–ï –ü–†–û–ï–ö–¢–ê")
        print("="*60)
        print(f"üìÅ –ü—Ä–æ–µ–∫—Ç: {docs_result.title}")
        print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {docs_result.description}")
        print(f"\nüíæ –§–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã:")
        print(f"   - –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥: {code_filepath}")
        print(f"   - –¢–µ—Å—Ç—ã: {test_filepath}")
        print(f"   - –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: {docs_filepath}")
        print(f"   - –õ–æ–≥ –∞–≥–µ–Ω—Ç–æ–≤: {os.path.join(self.config.WORKSPACE_DIR, 'agents_workflow.log')}")
        print(f"   - RAW AutoGen –ª–æ–≥–∏: {os.path.join(self.config.WORKSPACE_DIR, 'autogen_raw_output.log')}")
        
        print(f"\nüîç Code Review ({len(review_result.review_comments)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤):")
        for comment in review_result.review_comments:
            print(f"   ‚úì {comment}")
            
        print(f"\nüí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ({len(review_result.improvements)} —É–ª—É—á—à–µ–Ω–∏–π):")
        for improvement in review_result.improvements:
            print(f"   ‚Üí {improvement}")
        
        print(f"\nüß™ –°—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {'‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã' if os.path.exists(test_filepath) else '‚ö†Ô∏è –¢–µ—Å—Ç—ã –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∏—Å—å'}")
        print(f"üê≥ Docker: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if self.config.USE_DOCKER else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}")
        print(f"üë®‚Äçüíº TeamLead —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ‚úÖ –í–∫–ª—é—á–µ–Ω–æ (–°–£–ü–ï–†–í–ò–ó–û–†)")
        print(f"ü§ù –£–ø—Ä–∞–≤–ª—è–µ–º–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞: ‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç + –†–µ–≤—å—é–µ—Ä –ø–æ–¥ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º")
        print(f"üîÑ –ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ‚úÖ –î–æ {self.config.MAX_IMPROVEMENT_LOOPS} –∏—Ç–µ—Ä–∞—Ü–∏–π")
        print(f"üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –æ—Ç —Ü–∏–∫–ª–æ–≤: ‚úÖ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–æ–≤")
        print(f"üìù Fancy –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: ‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥ –∞–≥–µ–Ω—Ç–æ–≤ —Å —ç–º–æ–¥–∑–∏")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–∞—Ö
        print(f"\nüí∞ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –¢–û–ö–ï–ù–û–í:")
        print(f"   üì• –í—Ö–æ–¥—è—â–∏–µ —Ç–æ–∫–µ–Ω—ã: {token_summary['total_input']:,}")
        print(f"   üì§ –ò—Å—Ö–æ–¥—è—â–∏–µ —Ç–æ–∫–µ–Ω—ã: {token_summary['total_output']:,}")
        print(f"   üéØ –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {token_summary['total_tokens']:,}")
        print(f"   üî¢ –í—Å–µ–≥–æ LLM –≤—ã–∑–æ–≤–æ–≤: {token_summary['total_calls']}")
        print(f"   üíµ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {token_summary['total_cost']:.4f} —Ä—É–±.")
        print(f"   üìÑ –õ–æ–≥ —Ç–æ–∫–µ–Ω–æ–≤: {os.path.join(self.config.WORKSPACE_DIR, 'tokens_usage.log')}")
        
        print("\n--- –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ ---")
        print(code_result.code)
        print("="*60)

# ==============================================================================
# –ß–∞—Å—Ç—å 4: –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
# ==============================================================================
if __name__ == "__main__":
    user_task = (
        "–ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –Ω–∞ Python, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–∞–ª–∏–∑—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é `calculate_days_for_iphone(monthly_salary)`.\n"
        "–§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è, —á—Ç–æ–±—ã –Ω–∞–∫–æ–ø–∏—Ç—å –Ω–∞ iPhone 15 Pro Max 256GB, "
        "–∏—Å—Ö–æ–¥—è –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç—ã –≤ –º–µ—Å—è—Ü. –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ.\n"
        "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: –≤ –º–µ—Å—è—Ü–µ 22.5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è; —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–µ—Ä–Ω—É—Ç—å –∫–∞–∫ –µ—Å—Ç—å; –¥–æ–±–∞–≤–∏—Ç—å –±–ª–æ–∫ `if __name__ == '__main__':` –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏."
    )
    
    config = Config()
    pipeline_manager = PipelineManager(config)
    pipeline_manager.run(task=user_task)
