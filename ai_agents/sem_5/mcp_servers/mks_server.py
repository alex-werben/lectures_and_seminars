import json
import logging
import requests

from typing import Dict, Any, List
from mcp.server.fastmcp import FastMCP, Context


logger = logging.getLogger("space_assistant")
logger.setLevel(logging.INFO)
handler = logging.StreamHandler()
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)


mcp = FastMCP(
    name="–ê—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç",
    system_prompt="""
–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –∑–Ω–∞–µ—Ç –≤—Å—ë –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–∏ –¥–µ–ª –≤ –∫–æ—Å–º–æ—Å–µ.
–ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, —á—Ç–æ–±—ã –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –∫–æ—Å–º–æ–Ω–∞–≤—Ç–∞—Ö –∏ –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–π –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ (–ú–ö–°).

–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:
- get_astronauts: –£–∑–Ω–∞—Ç—å, –∫—Ç–æ —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ—Å–º–æ—Å–µ.
- get_iss_location: –£–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ú–ö–°.

–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:
- "–°–∫–æ–ª—å–∫–æ –ª—é–¥–µ–π —Å–µ–π—á–∞—Å –≤ –∫–æ—Å–º–æ—Å–µ?"
- "–ö—Ç–æ —Å–µ–π—á–∞—Å –Ω–∞ –ú–ö–°?"
- "–ì–¥–µ —Å–µ–π—á–∞—Å –ª–µ—Ç–∏—Ç –ú–ö–°?"
"""
)


@mcp.tool()
def get_astronauts(context: Context) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ª—é–¥–µ–π, –Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –∫–æ—Å–º–æ—Å–µ.

    Args:
        context (Context): –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
    Returns:
        (str): JSON-—Å—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
    """
    api_url = "http://api.open-notify.org/astros.json"

    try:
        response = requests.get(api_url)

        if response.status_code == 200:
            return json.dumps(response.json(), ensure_ascii=False, indent=2)
        else:
            return json.dumps({"error": f"API –≤–µ—Ä–Ω—É–ª–æ –æ—à–∏–±–∫—É: {response.status_code}"})
    except requests.exceptions.RequestException as e:
        return json.dumps({"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–∏—Å—É Open Notify."})

@mcp.tool()
def get_iss_location(context: Context) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ú–ö–°.

    Args:
        context (Context): –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
    Returns:
        (str): JSON-—Å—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
    """
    api_url = "http://api.open-notify.org/iss-now.json"

    try:
        response = requests.get(api_url)

        if response.status_code == 200:
            return json.dumps(response.json(), ensure_ascii=False, indent=2)
        else:
            return json.dumps({"error": f"API –≤–µ—Ä–Ω—É–ª–æ –æ—à–∏–±–∫—É: {response.status_code}"})
    except requests.exceptions.RequestException as e:
        return json.dumps({"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–∏—Å—É Open Notify."})

@mcp.prompt()
def handle_space_query(prompt: str, 
                       context: Context) -> List[Dict[str, Any]]:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
    
    –†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç:
    - –∑–∞–ø—Ä–æ—Å—ã –æ –ª—é–¥—è—Ö –≤ –∫–æ—Å–º–æ—Å–µ (–ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: "–∫—Ç–æ", "–ª—é–¥–∏", "–∫–æ—Å–º–æ–Ω–∞–≤—Ç", "–∞—Å—Ç—Ä–æ–Ω–∞–≤—Ç")
    - –∑–∞–ø—Ä–æ—Å—ã –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –ú–ö–° (–ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: "–≥–¥–µ", "–ú–ö–°", "–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")
    
    –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:
    1. –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    2. –í—ã–∑—ã–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç API
    3. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ
    4. –î–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ú–ö–° –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ Google Maps
    
    Args:
        prompt (str): –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context (Context): –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
        
    Returns:
        (List[Dict]): —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
            [{"role": "assistant", "content": "–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç"}]
    """
    prompt_lower = prompt.lower()
    
    if "–∫—Ç–æ" in prompt_lower or "–ª—é–¥–∏" in prompt_lower or "–∫–æ—Å–º–æ–Ω–∞–≤—Ç" in prompt_lower or "–∞—Å—Ç—Ä–æ–Ω–∞–≤—Ç" in prompt_lower:
        result_json = get_astronauts(context)
        data = json.loads(result_json)
        
        if "error" in data:
            response = f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {data['error']}"
        else:
            response = f"üë®‚ÄçüöÄ **–°–µ–π—á–∞—Å –≤ –∫–æ—Å–º–æ—Å–µ {data['number']} —á–µ–ª–æ–≤–µ–∫:**\n\n"
            crafts = {}

            for person in data['people']:
                if person['craft'] not in crafts:
                    crafts[person['craft']] = []

                crafts[person['craft']].append(person['name'])
            
            for craft, names in crafts.items():
                response += f"**–ö–æ—Ä–∞–±–ª—å '{craft}':**\n"

                for name in names:
                    response += f"- {name}\n"

                response += "\n"

    elif "–≥–¥–µ" in prompt_lower or "–º–∫—Å" in prompt_lower or "–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã" in prompt_lower:
        result_json = get_iss_location(context)
        data = json.loads(result_json)
        
        if "error" in data:
            response = f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {data['error']}"
        else:
            lat = data['iss_position']['latitude']
            lon = data['iss_position']['longitude']
            response = (
                f"**–¢–µ–∫—É—â–µ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –ú–ö–°:**\n"
                f"- –®–∏—Ä–æ—Ç–∞: {lat}\n"
                f"- –î–æ–ª–≥–æ—Ç–∞: {lon}\n\n"
                f"–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —ç—Ç–æ –Ω–∞ –∫–∞—Ä—Ç–µ: [—Å—Å—ã–ª–∫–∞](https://www.google.com/maps/search/?api=1&query={lat},{lon})"
            )
    else:
        response = "–Ø –º–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å, –∫—Ç–æ —Å–µ–π—á–∞—Å –≤ –∫–æ—Å–º–æ—Å–µ –∏–ª–∏ –≥–¥–µ –ª–µ—Ç–∏—Ç –ú–ö–°. –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"

    return [
        {
            "role": "assistant",
            "content": response
        }
    ]


if __name__ == "__main__":
    mcp.run(transport="stdio")